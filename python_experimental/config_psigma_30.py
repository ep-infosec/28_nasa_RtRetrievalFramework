from full_physics import *
import numpy as np
import pressure_sigma
import temperature_ecmwf
import absorber_vmr_ecmwf
import aerosol_interp

# Get Defaults
ls = LuaState.load_file("../unit_test_data/base_config.lua")
lg = ls.globals()
lg.config = lg.BaseConfig.new(lg.BaseConfig)
lua_config = ls.globals().config

# This sets up to run some real data we have extracted in the unit test
# directory

# Input for HDF file
lua_config.spectrum_file = "20100207003330_data/l1_20100207003330.h5"
lua_config.sid_string = "20100207003330"

# Use HDF Level 1 file rather than ASCII
lua_config.create_level_1b = lg.ConfigCommon.level1b_hdf
lua_config.create_noise = lg.ConfigCommon.gosat_noise

# Cloud file to go with this.
lua_config.cloud_file = "20100207003330_data/cld_20100207003330.h5"

# Pressure from ECMWF
lua_config.ecmwf_file = "20100207003330_data/ecm_20100207003330.h5"
lua_config.reader.pressure.apriori = lg.ConfigCommon.ecmwf_pressure
lua_config.reader.temperature.levels.apriori = lg.ConfigCommon.ecmwf_temperature
lua_config.reader.gas.h2o.apriori = lg.ConfigCommon.ecmwf_h2o_vmr

# Get apriori values from text file generated by python.
lua_config.reader.instrument.dispersion.apriori = \
   lg.ConfigCommon.ascii_dispersion("20100207003330_data/dispersion_20100207003330.dat")
lua_config.reader.gas.co2.apriori = \
   lg.ConfigCommon.ascii_read("20100207003330_data/co2_apriori_20100207003330.dat", "co2")
lua_config.reader.ground.lambertian_gsd = \
   lg.ConfigCommon.hdf_ground_spectrally_dependent_ascii_apriori("Ground/Lambertian", 1, 2, 
      "20100207003330_data/albedo_20100207003330.dat")

# Local modifications
a = np.zeros(30)
b = np.empty(30)
b[0] = 1e-3
b[1:30] = range(1,30)
b[1:30] /= 29
lua_config.create_pressure = lambda c : pressure_sigma.create_pressure_sigma(c, a, b)
lua_config.create_temperature = temperature_ecmwf.create_temperature_ecmwf
lua_config.create_absorber = absorber_vmr_ecmwf.create_absorber_ecmwf
lua_config.write_jacobian = True

# Use 30 level veriosn of l2_static_input.h5
lua_config.static_file = "../python_fullphysics/l2_static_input_30.h5"
# Which levels we are fitting for
RETRIEVE = 1
HOLD_FIXED = 2
INTERPOLATE = 3

coeff_flag = np.array( \
    [RETRIEVE, INTERPOLATE, RETRIEVE, INTERPOLATE, 
     RETRIEVE, INTERPOLATE, RETRIEVE, INTERPOLATE, RETRIEVE, INTERPOLATE,
     RETRIEVE, INTERPOLATE, RETRIEVE, INTERPOLATE, 
     RETRIEVE, INTERPOLATE, RETRIEVE, INTERPOLATE, RETRIEVE, INTERPOLATE,
     RETRIEVE, RETRIEVE, RETRIEVE, RETRIEVE, RETRIEVE, RETRIEVE, 
     RETRIEVE, RETRIEVE, RETRIEVE, RETRIEVE])
lua_config.reader.gas.co2.coeff_flag = coeff_flag

def aerosol_create(c, name, aext, ret_flag):
    return aerosol_interp.AerosolExtinctionLogInterp(c.pressure, coeff_flag, 
                                                     aext, name)

lua_config.reader.aerosol.Kahn_2b.model = aerosol_create
lua_config.reader.aerosol.Kahn_3b.model = aerosol_create
lua_config.reader.aerosol.Water.model = aerosol_create
lua_config.reader.aerosol.Ice.model = aerosol_create
# Now create everything
lua_config.do_config(lua_config)

