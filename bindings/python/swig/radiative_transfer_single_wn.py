# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _radiative_transfer_single_wn.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_radiative_transfer_single_wn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_radiative_transfer_single_wn')
    _radiative_transfer_single_wn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radiative_transfer_single_wn', [dirname(__file__)])
        except ImportError:
            import _radiative_transfer_single_wn
            return _radiative_transfer_single_wn
        try:
            _mod = imp.load_module('_radiative_transfer_single_wn', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _radiative_transfer_single_wn = swig_import_helper()
    del swig_import_helper
else:
    import _radiative_transfer_single_wn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _radiative_transfer_single_wn.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.radiative_transfer_fixed_stokes_coefficient
import full_physics_swig.radiative_transfer
import full_physics_swig.generic_object
import full_physics_swig.observer
import full_physics_swig.named_spectrum
import full_physics_swig.state_vector
class RadiativeTransferSingleWn(full_physics_swig.radiative_transfer_fixed_stokes_coefficient.RadiativeTransferFixedStokesCoefficient):
    """

    This is a RadiativeTransfer that supplies an interface that can be
    called for a single wavenumber.

    This class mixes in some of the common functionality needed by LRadRt
    and LidortDriver. We may want to pull some of this out into separate
    classes. But right now we only have a few examples of a
    RadiativeTransfer and it isn't at all clear what a useful hierarchy
    would be. Rather than try to predict what we might need in the future,
    we really just have two categories: "The LSI" and "LRad and
    LIDORT". This class is really the later, and I guess we could have
    called it StuffThatIsInCommonWithLRadAndLidort.

    C++ includes: radiative_transfer_single_wn.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def _v_number_stream(self):
        """

        virtual int FullPhysics::RadiativeTransferSingleWn::number_stream() const =0
        Number of streams to use in processing.

        Note that Lidort 3.0 used a less common "full streams" that was
        twice the more commonly used "half streams". This function returns
        the later. This is the same as what is used in Lidort 3.5 and LRad.
        The "full streams" used in Lidort 3.0 would be twice this. 
        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn__v_number_stream(self)


    @property
    def number_stream(self):
        return self._v_number_stream()


    def _v_atmosphere(self):
        """

        const boost::shared_ptr<RtAtmosphere>& FullPhysics::RadiativeTransferSingleWn::atmosphere() const

        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn__v_atmosphere(self)


    @property
    def atmosphere(self):
        return self._v_atmosphere()


    def stokes_single_wn(self, Wn, Spec_index, Iv):
        """

        virtual blitz::Array<double, 1> FullPhysics::RadiativeTransferSingleWn::stokes_single_wn(double Wn, int Spec_index, const ArrayAd< double, 2 > &Iv=ArrayAd<
        double, 2 >()) const =0
        Calculate stokes vector for the given wavenumber.

        You can optionally supply a set of intermediate atmosphere variables
        (e.g., taug, taur, taua_i) to use instead of with atmosphere_ptr() to
        calculate this.

        Parameters:
        -----------

        Wn:  Wavenumber to calculate for. This should be in cm^-1

        Spec_index:  The Spectral index

        Iv:  Optional intermediate variables to use, rather than calculating.

        The set of stokes coefficients. This is number_stokes() in size. 
        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_single_wn(self, Wn, Spec_index, Iv)


    def stokes_and_jacobian_single_wn(self, Wn, Spec_index, Iv):
        """

        virtual ArrayAd<double, 1> FullPhysics::RadiativeTransferSingleWn::stokes_and_jacobian_single_wn(double Wn, int Spec_index, const ArrayAd< double, 2 > &Iv=ArrayAd<
        double, 2 >()) const =0
        Calculate stokes vector and Jacobian for the given wavenumber.

        You can optionally supply a set of intermediate atmosphere variables
        (e.g., taug, taur, taua_i) to use instead of with atmosphere_ptr() to
        calculate this.

        Parameters:
        -----------

        Wn:  Wavenumber to calculate for. This should be in cm^-1

        Spec_index:  The Spectral index

        Iv:  Optional intermediate variables to use, rather than calculating.

        The set of stokes coefficients. This is number_stokes() in size. 
        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_and_jacobian_single_wn(self, Wn, Spec_index, Iv)

    __swig_destroy__ = _radiative_transfer_single_wn.delete_RadiativeTransferSingleWn
RadiativeTransferSingleWn._v_number_stream = new_instancemethod(_radiative_transfer_single_wn.RadiativeTransferSingleWn__v_number_stream, None, RadiativeTransferSingleWn)
RadiativeTransferSingleWn._v_atmosphere = new_instancemethod(_radiative_transfer_single_wn.RadiativeTransferSingleWn__v_atmosphere, None, RadiativeTransferSingleWn)
RadiativeTransferSingleWn.stokes_single_wn = new_instancemethod(_radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_single_wn, None, RadiativeTransferSingleWn)
RadiativeTransferSingleWn.stokes_and_jacobian_single_wn = new_instancemethod(_radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_and_jacobian_single_wn, None, RadiativeTransferSingleWn)
RadiativeTransferSingleWn_swigregister = _radiative_transfer_single_wn.RadiativeTransferSingleWn_swigregister
RadiativeTransferSingleWn_swigregister(RadiativeTransferSingleWn)



