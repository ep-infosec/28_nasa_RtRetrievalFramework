# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _fts_run_log.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fts_run_log')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fts_run_log')
    _fts_run_log = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fts_run_log', [dirname(__file__)])
        except ImportError:
            import _fts_run_log
            return _fts_run_log
        try:
            _mod = imp.load_module('_fts_run_log', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fts_run_log = swig_import_helper()
    del swig_import_helper
else:
    import _fts_run_log
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _fts_run_log.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class FtsRunLogRecord(full_physics_swig.generic_object.GenericObject):
    """

    This is a single FTS run log record.

    C++ includes: fts_run_log.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    spectrum_name = _swig_property(_fts_run_log.FtsRunLogRecord_spectrum_name_get, _fts_run_log.FtsRunLogRecord_spectrum_name_set)
    time = _swig_property(_fts_run_log.FtsRunLogRecord_time_get, _fts_run_log.FtsRunLogRecord_time_set)
    latitude = _swig_property(_fts_run_log.FtsRunLogRecord_latitude_get, _fts_run_log.FtsRunLogRecord_latitude_set)
    longitude = _swig_property(_fts_run_log.FtsRunLogRecord_longitude_get, _fts_run_log.FtsRunLogRecord_longitude_set)
    altitude = _swig_property(_fts_run_log.FtsRunLogRecord_altitude_get, _fts_run_log.FtsRunLogRecord_altitude_set)
    solar_zenith = _swig_property(_fts_run_log.FtsRunLogRecord_solar_zenith_get, _fts_run_log.FtsRunLogRecord_solar_zenith_set)
    zenith_offset = _swig_property(_fts_run_log.FtsRunLogRecord_zenith_offset_get, _fts_run_log.FtsRunLogRecord_zenith_offset_set)
    solar_azimuth = _swig_property(_fts_run_log.FtsRunLogRecord_solar_azimuth_get, _fts_run_log.FtsRunLogRecord_solar_azimuth_set)
    observer_sun_doppler_shift = _swig_property(_fts_run_log.FtsRunLogRecord_observer_sun_doppler_shift_get, _fts_run_log.FtsRunLogRecord_observer_sun_doppler_shift_set)
    optical_path_difference = _swig_property(_fts_run_log.FtsRunLogRecord_optical_path_difference_get, _fts_run_log.FtsRunLogRecord_optical_path_difference_set)
    internal_fov = _swig_property(_fts_run_log.FtsRunLogRecord_internal_fov_get, _fts_run_log.FtsRunLogRecord_internal_fov_set)
    external_fov = _swig_property(_fts_run_log.FtsRunLogRecord_external_fov_get, _fts_run_log.FtsRunLogRecord_external_fov_set)
    angular_misalignment = _swig_property(_fts_run_log.FtsRunLogRecord_angular_misalignment_get, _fts_run_log.FtsRunLogRecord_angular_misalignment_set)
    index_first = _swig_property(_fts_run_log.FtsRunLogRecord_index_first_get, _fts_run_log.FtsRunLogRecord_index_first_set)
    index_last = _swig_property(_fts_run_log.FtsRunLogRecord_index_last_get, _fts_run_log.FtsRunLogRecord_index_last_set)
    spacing_raw_spectrum = _swig_property(_fts_run_log.FtsRunLogRecord_spacing_raw_spectrum_get, _fts_run_log.FtsRunLogRecord_spacing_raw_spectrum_set)
    length_attached_header = _swig_property(_fts_run_log.FtsRunLogRecord_length_attached_header_get, _fts_run_log.FtsRunLogRecord_length_attached_header_set)
    byte_per_word = _swig_property(_fts_run_log.FtsRunLogRecord_byte_per_word_get, _fts_run_log.FtsRunLogRecord_byte_per_word_set)
    zero_level_offset = _swig_property(_fts_run_log.FtsRunLogRecord_zero_level_offset_get, _fts_run_log.FtsRunLogRecord_zero_level_offset_set)
    snr = _swig_property(_fts_run_log.FtsRunLogRecord_snr_get, _fts_run_log.FtsRunLogRecord_snr_set)
    apodization_function = _swig_property(_fts_run_log.FtsRunLogRecord_apodization_function_get, _fts_run_log.FtsRunLogRecord_apodization_function_set)
    inside_temperature = _swig_property(_fts_run_log.FtsRunLogRecord_inside_temperature_get, _fts_run_log.FtsRunLogRecord_inside_temperature_set)
    inside_pressure = _swig_property(_fts_run_log.FtsRunLogRecord_inside_pressure_get, _fts_run_log.FtsRunLogRecord_inside_pressure_set)
    inside_humidity = _swig_property(_fts_run_log.FtsRunLogRecord_inside_humidity_get, _fts_run_log.FtsRunLogRecord_inside_humidity_set)
    outside_temperature = _swig_property(_fts_run_log.FtsRunLogRecord_outside_temperature_get, _fts_run_log.FtsRunLogRecord_outside_temperature_set)
    outside_pressure = _swig_property(_fts_run_log.FtsRunLogRecord_outside_pressure_get, _fts_run_log.FtsRunLogRecord_outside_pressure_set)
    outside_humidity = _swig_property(_fts_run_log.FtsRunLogRecord_outside_humidity_get, _fts_run_log.FtsRunLogRecord_outside_humidity_set)
    solar_intensity_average = _swig_property(_fts_run_log.FtsRunLogRecord_solar_intensity_average_get, _fts_run_log.FtsRunLogRecord_solar_intensity_average_set)
    fractional_variation_solar_intensity = _swig_property(_fts_run_log.FtsRunLogRecord_fractional_variation_solar_intensity_get, _fts_run_log.FtsRunLogRecord_fractional_variation_solar_intensity_set)
    wind_speed = _swig_property(_fts_run_log.FtsRunLogRecord_wind_speed_get, _fts_run_log.FtsRunLogRecord_wind_speed_set)
    wind_direction = _swig_property(_fts_run_log.FtsRunLogRecord_wind_direction_get, _fts_run_log.FtsRunLogRecord_wind_direction_set)
    laser_frequency = _swig_property(_fts_run_log.FtsRunLogRecord_laser_frequency_get, _fts_run_log.FtsRunLogRecord_laser_frequency_set)
    sun_tracker_frequency = _swig_property(_fts_run_log.FtsRunLogRecord_sun_tracker_frequency_get, _fts_run_log.FtsRunLogRecord_sun_tracker_frequency_set)
    airmass_independent_path_length = _swig_property(_fts_run_log.FtsRunLogRecord_airmass_independent_path_length_get, _fts_run_log.FtsRunLogRecord_airmass_independent_path_length_set)
    spectrum_index = _swig_property(_fts_run_log.FtsRunLogRecord_spectrum_index_get, _fts_run_log.FtsRunLogRecord_spectrum_index_set)

    def __init__(self):
        """

        FullPhysics::FtsRunLogRecord::FtsRunLogRecord()
        Initializes all the records to a sane default. 
        """
        _fts_run_log.FtsRunLogRecord_swiginit(self, _fts_run_log.new_FtsRunLogRecord())
    __swig_destroy__ = _fts_run_log.delete_FtsRunLogRecord
FtsRunLogRecord_swigregister = _fts_run_log.FtsRunLogRecord_swigregister
FtsRunLogRecord_swigregister(FtsRunLogRecord)

class FtsRunLog(full_physics_swig.generic_object.GenericObject):
    """

    This reads a FTS run log file.

    This is just a simple text file, this class handles reading this data.

    There are two different types of run logs, either space delimited or
    tab delimited. We currently only support the space delimited (support
    for tab delimited would really just require adding unit test data, it
    isn't all that different from the space delimited).

    There are also several formats for the space delimited files, which
    vary depending on the size of the a line. We only read the latest
    "New GDS-format", which has a line length of 300.

    C++ includes: fts_run_log.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        FtsRunLog::FtsRunLog(const HdfFile &Hfile, const std::string &Group_name, const
        std::vector< std::string > &Band_names)
        Read a FtsRunLogRecord from a HDF file group The datasets read match
        the same output by the L2 single sounding file. 
        """
        _fts_run_log.FtsRunLog_swiginit(self, _fts_run_log.new_FtsRunLog(*args))

    def read(self, spectrum_name):
        """

        const FtsRunLogRecord & FtsRunLog::read(const std::string &spectrum_name) const
        Return the record for the given spectrum name. 
        """
        return _fts_run_log.FtsRunLog_read(self, spectrum_name)

    __swig_destroy__ = _fts_run_log.delete_FtsRunLog
FtsRunLog.read = new_instancemethod(_fts_run_log.FtsRunLog_read, None, FtsRunLog)
FtsRunLog_swigregister = _fts_run_log.FtsRunLog_swigregister
FtsRunLog_swigregister(FtsRunLog)



