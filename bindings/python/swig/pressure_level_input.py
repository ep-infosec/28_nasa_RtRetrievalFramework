# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _pressure_level_input.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pressure_level_input')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pressure_level_input')
    _pressure_level_input = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pressure_level_input', [dirname(__file__)])
        except ImportError:
            import _pressure_level_input
            return _pressure_level_input
        try:
            _mod = imp.load_module('_pressure_level_input', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pressure_level_input = swig_import_helper()
    del swig_import_helper
else:
    import _pressure_level_input
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _pressure_level_input.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class PressureLevelInput(object):
    """

    In a retrieval, there are typically two different pressure levels of
    interest.

    One is the pressure levels where various initial parameters are
    defined, e.g. Temperature read from an ECMWF file at specific pressure
    levels. The second set is the current pressure levels that define the
    layers used in the Radiative Transfer calculation. The first set is
    fixed constant level, it is whatever was used when we initial read the
    input data. The second will potentially vary as we do a retrieval.

    This class captures the first, fixed set of pressure levels. This is
    little more than an Array of values.

    C++ includes: pressure_level_input.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        FullPhysics::PressureLevelInput::PressureLevelInput(const HdfFile &Hdf_file, const std::string &Hdf_group="Pressure")
        Constructor.

        Parameters:
        -----------

        Hdf_file:  The HdfFile to read. This reads the given HDF group.

        Hdf_group:  The HDF group to read. 
        """
        _pressure_level_input.PressureLevelInput_swiginit(self, _pressure_level_input.new_PressureLevelInput(*args))

    def _v_pressure_level(self):
        """

        const blitz::Array<double, 1>& FullPhysics::PressureLevelInput::pressure_level() const
        Pressure levels that input data was defined on.

        Pressure level in ascending order, in Pascals. 
        """
        return _pressure_level_input.PressureLevelInput__v_pressure_level(self)


    @property
    def pressure_level(self):
        return self._v_pressure_level()

    __swig_destroy__ = _pressure_level_input.delete_PressureLevelInput
PressureLevelInput._v_pressure_level = new_instancemethod(_pressure_level_input.PressureLevelInput__v_pressure_level, None, PressureLevelInput)
PressureLevelInput.__str__ = new_instancemethod(_pressure_level_input.PressureLevelInput___str__, None, PressureLevelInput)
PressureLevelInput_swigregister = _pressure_level_input.PressureLevelInput_swigregister
PressureLevelInput_swigregister(PressureLevelInput)



