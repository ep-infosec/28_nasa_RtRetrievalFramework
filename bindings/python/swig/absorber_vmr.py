# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _absorber_vmr.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_absorber_vmr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_absorber_vmr')
    _absorber_vmr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_absorber_vmr', [dirname(__file__)])
        except ImportError:
            import _absorber_vmr
            return _absorber_vmr
        try:
            _mod = imp.load_module('_absorber_vmr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _absorber_vmr = swig_import_helper()
    del swig_import_helper
else:
    import _absorber_vmr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _absorber_vmr.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_absorber_vmr.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_absorber_vmr.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_absorber_vmr.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_absorber_vmr.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_absorber_vmr.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_absorber_vmr.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_absorber_vmr.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_absorber_vmr.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_absorber_vmr.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_absorber_vmr.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_absorber_vmr.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_absorber_vmr.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_absorber_vmr.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_absorber_vmr.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_absorber_vmr.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_absorber_vmr.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _absorber_vmr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _absorber_vmr.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.state_vector
import full_physics_swig.generic_object
class ObservableAbsorberVmr(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _absorber_vmr.delete_ObservableAbsorberVmr
ObservableAbsorberVmr.add_observer_and_keep_reference = new_instancemethod(_absorber_vmr.ObservableAbsorberVmr_add_observer_and_keep_reference, None, ObservableAbsorberVmr)
ObservableAbsorberVmr.add_observer = new_instancemethod(_absorber_vmr.ObservableAbsorberVmr_add_observer, None, ObservableAbsorberVmr)
ObservableAbsorberVmr.remove_observer = new_instancemethod(_absorber_vmr.ObservableAbsorberVmr_remove_observer, None, ObservableAbsorberVmr)
ObservableAbsorberVmr_swigregister = _absorber_vmr.ObservableAbsorberVmr_swigregister
ObservableAbsorberVmr_swigregister(ObservableAbsorberVmr)

class ObserverAbsorberVmr(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _absorber_vmr.ObserverAbsorberVmr_swiginit(self, _absorber_vmr.new_ObserverAbsorberVmr())
    __swig_destroy__ = _absorber_vmr.delete_ObserverAbsorberVmr
ObserverAbsorberVmr.notify_update = new_instancemethod(_absorber_vmr.ObserverAbsorberVmr_notify_update, None, ObserverAbsorberVmr)
ObserverAbsorberVmr.notify_add = new_instancemethod(_absorber_vmr.ObserverAbsorberVmr_notify_add, None, ObserverAbsorberVmr)
ObserverAbsorberVmr.notify_remove = new_instancemethod(_absorber_vmr.ObserverAbsorberVmr_notify_remove, None, ObserverAbsorberVmr)
ObserverAbsorberVmr_swigregister = _absorber_vmr.ObserverAbsorberVmr_swigregister
ObserverAbsorberVmr_swigregister(ObserverAbsorberVmr)

class AbsorberVmr(full_physics_swig.state_vector.StateVectorObserver, ObservableAbsorberVmr):
    """

    This gives the Gas Absorber Volumn mixing ratio for a single gas.

    This gets used by AbsorberAbsco class.

    When implementing a new class, you almost always will want to derive
    from AbsorberVmrImpBase rather than from this class. See that class
    for a description.

    C++ includes: absorber_vmr.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _absorber_vmr.delete_AbsorberVmr

    def clone(self, *args):
        """

        virtual boost::shared_ptr<AbsorberVmr> FullPhysics::AbsorberVmr::clone(const boost::shared_ptr< Pressure > &Press) const =0
        This version of clone takes a pressure to use.

        The intent is that the pressure has been cloned from the original
        pressure (although this class has no way to verify this). This allows
        sets of objects to be cloned using a common Pressure clone, e.g.
        Atmosphere. 
        """
        return _absorber_vmr.AbsorberVmr_clone(self, *args)


    def _v_gas_name(self):
        """

        virtual std::string FullPhysics::AbsorberVmr::gas_name() const =0
        This indicates the name of this particular Absorber.

        The naming convention is free form but recommended to use the short
        form often used by HITRAN 
        """
        return _absorber_vmr.AbsorberVmr__v_gas_name(self)


    @property
    def gas_name(self):
        return self._v_gas_name()


    def volume_mixing_ratio(self, P):
        """

        virtual AutoDerivative<double> FullPhysics::AbsorberVmr::volume_mixing_ratio(const AutoDerivative< double > &P) const =0
        This returns the volume mixing ratio at the given pressure level.

        This is dimensionless, and the pressure is in Pascals 
        """
        return _absorber_vmr.AbsorberVmr_volume_mixing_ratio(self, P)


    def vmr_grid(self, P):
        """

        ArrayAd< double, 1 > AbsorberVmr::vmr_grid(const Pressure &P) const
        Return the vmr on the pressure grid. 
        """
        return _absorber_vmr.AbsorberVmr_vmr_grid(self, P)


    def _v_state_used(self):
        """

        virtual blitz::Array<bool, 1> FullPhysics::AbsorberVmr::state_used() const =0
        Indicate what portion of the state vector is used to calculate the
        VMR. 
        """
        return _absorber_vmr.AbsorberVmr__v_state_used(self)


    @property
    def state_used(self):
        return self._v_state_used()

AbsorberVmr.clone = new_instancemethod(_absorber_vmr.AbsorberVmr_clone, None, AbsorberVmr)
AbsorberVmr._v_gas_name = new_instancemethod(_absorber_vmr.AbsorberVmr__v_gas_name, None, AbsorberVmr)
AbsorberVmr.volume_mixing_ratio = new_instancemethod(_absorber_vmr.AbsorberVmr_volume_mixing_ratio, None, AbsorberVmr)
AbsorberVmr.vmr_grid = new_instancemethod(_absorber_vmr.AbsorberVmr_vmr_grid, None, AbsorberVmr)
AbsorberVmr._v_state_used = new_instancemethod(_absorber_vmr.AbsorberVmr__v_state_used, None, AbsorberVmr)
AbsorberVmr.__str__ = new_instancemethod(_absorber_vmr.AbsorberVmr___str__, None, AbsorberVmr)
AbsorberVmr_swigregister = _absorber_vmr.AbsorberVmr_swigregister
AbsorberVmr_swigregister(AbsorberVmr)

class vector_absorber_vmr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _absorber_vmr.vector_absorber_vmr_swiginit(self, _absorber_vmr.new_vector_absorber_vmr(*args))
    __swig_destroy__ = _absorber_vmr.delete_vector_absorber_vmr
vector_absorber_vmr.iterator = new_instancemethod(_absorber_vmr.vector_absorber_vmr_iterator, None, vector_absorber_vmr)
vector_absorber_vmr.__nonzero__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___nonzero__, None, vector_absorber_vmr)
vector_absorber_vmr.__bool__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___bool__, None, vector_absorber_vmr)
vector_absorber_vmr.__len__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___len__, None, vector_absorber_vmr)
vector_absorber_vmr.__getslice__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___getslice__, None, vector_absorber_vmr)
vector_absorber_vmr.__setslice__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___setslice__, None, vector_absorber_vmr)
vector_absorber_vmr.__delslice__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___delslice__, None, vector_absorber_vmr)
vector_absorber_vmr.__delitem__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___delitem__, None, vector_absorber_vmr)
vector_absorber_vmr.__getitem__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___getitem__, None, vector_absorber_vmr)
vector_absorber_vmr.__setitem__ = new_instancemethod(_absorber_vmr.vector_absorber_vmr___setitem__, None, vector_absorber_vmr)
vector_absorber_vmr.pop = new_instancemethod(_absorber_vmr.vector_absorber_vmr_pop, None, vector_absorber_vmr)
vector_absorber_vmr.append = new_instancemethod(_absorber_vmr.vector_absorber_vmr_append, None, vector_absorber_vmr)
vector_absorber_vmr.empty = new_instancemethod(_absorber_vmr.vector_absorber_vmr_empty, None, vector_absorber_vmr)
vector_absorber_vmr.size = new_instancemethod(_absorber_vmr.vector_absorber_vmr_size, None, vector_absorber_vmr)
vector_absorber_vmr.swap = new_instancemethod(_absorber_vmr.vector_absorber_vmr_swap, None, vector_absorber_vmr)
vector_absorber_vmr.begin = new_instancemethod(_absorber_vmr.vector_absorber_vmr_begin, None, vector_absorber_vmr)
vector_absorber_vmr.end = new_instancemethod(_absorber_vmr.vector_absorber_vmr_end, None, vector_absorber_vmr)
vector_absorber_vmr.rbegin = new_instancemethod(_absorber_vmr.vector_absorber_vmr_rbegin, None, vector_absorber_vmr)
vector_absorber_vmr.rend = new_instancemethod(_absorber_vmr.vector_absorber_vmr_rend, None, vector_absorber_vmr)
vector_absorber_vmr.clear = new_instancemethod(_absorber_vmr.vector_absorber_vmr_clear, None, vector_absorber_vmr)
vector_absorber_vmr.get_allocator = new_instancemethod(_absorber_vmr.vector_absorber_vmr_get_allocator, None, vector_absorber_vmr)
vector_absorber_vmr.pop_back = new_instancemethod(_absorber_vmr.vector_absorber_vmr_pop_back, None, vector_absorber_vmr)
vector_absorber_vmr.erase = new_instancemethod(_absorber_vmr.vector_absorber_vmr_erase, None, vector_absorber_vmr)
vector_absorber_vmr.push_back = new_instancemethod(_absorber_vmr.vector_absorber_vmr_push_back, None, vector_absorber_vmr)
vector_absorber_vmr.front = new_instancemethod(_absorber_vmr.vector_absorber_vmr_front, None, vector_absorber_vmr)
vector_absorber_vmr.back = new_instancemethod(_absorber_vmr.vector_absorber_vmr_back, None, vector_absorber_vmr)
vector_absorber_vmr.assign = new_instancemethod(_absorber_vmr.vector_absorber_vmr_assign, None, vector_absorber_vmr)
vector_absorber_vmr.resize = new_instancemethod(_absorber_vmr.vector_absorber_vmr_resize, None, vector_absorber_vmr)
vector_absorber_vmr.insert = new_instancemethod(_absorber_vmr.vector_absorber_vmr_insert, None, vector_absorber_vmr)
vector_absorber_vmr.reserve = new_instancemethod(_absorber_vmr.vector_absorber_vmr_reserve, None, vector_absorber_vmr)
vector_absorber_vmr.capacity = new_instancemethod(_absorber_vmr.vector_absorber_vmr_capacity, None, vector_absorber_vmr)
vector_absorber_vmr_swigregister = _absorber_vmr.vector_absorber_vmr_swigregister
vector_absorber_vmr_swigregister(vector_absorber_vmr)



