# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _absorber_vmr_fixed_level_scaled.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_absorber_vmr_fixed_level_scaled')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_absorber_vmr_fixed_level_scaled')
    _absorber_vmr_fixed_level_scaled = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_absorber_vmr_fixed_level_scaled', [dirname(__file__)])
        except ImportError:
            import _absorber_vmr_fixed_level_scaled
            return _absorber_vmr_fixed_level_scaled
        try:
            _mod = imp.load_module('_absorber_vmr_fixed_level_scaled', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _absorber_vmr_fixed_level_scaled = swig_import_helper()
    del swig_import_helper
else:
    import _absorber_vmr_fixed_level_scaled
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _absorber_vmr_fixed_level_scaled.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.absorber_vmr_imp_base
import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.sub_state_vector_array
import full_physics_swig.absorber_vmr
class AbsorberVmrFixedLevelScaled(full_physics_swig.absorber_vmr_imp_base.AbsorberVmrImpBase):
    """

    This class maps the state vector to the absorber VMR on each level.

    This implementation has the VMR passed to the constructor, and applies
    a scale factor from the state vector.

    C++ includes: absorber_vmr_fixed_level_scaled.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Press, Press_level, Vmr, Used_flag, Scale, Gas_name):
        """

        AbsorberVmrFixedLevelScaled::AbsorberVmrFixedLevelScaled(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        PressureLevelInput > &Press_level, const blitz::Array< double, 1 >
        &Vmr, bool Used_flag, double Scale, const std::string &Gas_name)

        """
        _absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled_swiginit(self, _absorber_vmr_fixed_level_scaled.new_AbsorberVmrFixedLevelScaled(Press, Press_level, Vmr, Used_flag, Scale, Gas_name))

    def clone(self, *args):
        """

        boost::shared_ptr< AbsorberVmr > AbsorberVmrFixedLevelScaled::clone(const boost::shared_ptr< Pressure > &Press) const

        """
        return _absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled_clone(self, *args)


    def _v_scale_factor(self):
        """

        double FullPhysics::AbsorberVmrFixedLevelScaled::scale_factor() const
        Scale factor. 
        """
        return _absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled__v_scale_factor(self)


    @property
    def scale_factor(self):
        return self._v_scale_factor()


    def _v_scale_uncertainty(self):
        """

        double FullPhysics::AbsorberVmrFixedLevelScaled::scale_uncertainty() const
        Uncertainty of scale factor. 
        """
        return _absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled__v_scale_uncertainty(self)


    @property
    def scale_uncertainty(self):
        return self._v_scale_uncertainty()

    __swig_destroy__ = _absorber_vmr_fixed_level_scaled.delete_AbsorberVmrFixedLevelScaled
AbsorberVmrFixedLevelScaled.clone = new_instancemethod(_absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled_clone, None, AbsorberVmrFixedLevelScaled)
AbsorberVmrFixedLevelScaled._v_scale_factor = new_instancemethod(_absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled__v_scale_factor, None, AbsorberVmrFixedLevelScaled)
AbsorberVmrFixedLevelScaled._v_scale_uncertainty = new_instancemethod(_absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled__v_scale_uncertainty, None, AbsorberVmrFixedLevelScaled)
AbsorberVmrFixedLevelScaled_swigregister = _absorber_vmr_fixed_level_scaled.AbsorberVmrFixedLevelScaled_swigregister
AbsorberVmrFixedLevelScaled_swigregister(AbsorberVmrFixedLevelScaled)



