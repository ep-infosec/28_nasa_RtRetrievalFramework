# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _stokes_coefficient.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_stokes_coefficient')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_stokes_coefficient')
    _stokes_coefficient = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stokes_coefficient', [dirname(__file__)])
        except ImportError:
            import _stokes_coefficient
            return _stokes_coefficient
        try:
            _mod = imp.load_module('_stokes_coefficient', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _stokes_coefficient = swig_import_helper()
    del swig_import_helper
else:
    import _stokes_coefficient
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _stokes_coefficient.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.state_vector
import full_physics_swig.generic_object
class ObservableStokesCoefficient(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stokes_coefficient.delete_ObservableStokesCoefficient
ObservableStokesCoefficient.add_observer_and_keep_reference = new_instancemethod(_stokes_coefficient.ObservableStokesCoefficient_add_observer_and_keep_reference, None, ObservableStokesCoefficient)
ObservableStokesCoefficient.add_observer = new_instancemethod(_stokes_coefficient.ObservableStokesCoefficient_add_observer, None, ObservableStokesCoefficient)
ObservableStokesCoefficient.remove_observer = new_instancemethod(_stokes_coefficient.ObservableStokesCoefficient_remove_observer, None, ObservableStokesCoefficient)
ObservableStokesCoefficient_swigregister = _stokes_coefficient.ObservableStokesCoefficient_swigregister
ObservableStokesCoefficient_swigregister(ObservableStokesCoefficient)

class ObserverStokesCoefficient(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _stokes_coefficient.ObserverStokesCoefficient_swiginit(self, _stokes_coefficient.new_ObserverStokesCoefficient())
    __swig_destroy__ = _stokes_coefficient.delete_ObserverStokesCoefficient
ObserverStokesCoefficient.notify_update = new_instancemethod(_stokes_coefficient.ObserverStokesCoefficient_notify_update, None, ObserverStokesCoefficient)
ObserverStokesCoefficient.notify_add = new_instancemethod(_stokes_coefficient.ObserverStokesCoefficient_notify_add, None, ObserverStokesCoefficient)
ObserverStokesCoefficient.notify_remove = new_instancemethod(_stokes_coefficient.ObserverStokesCoefficient_notify_remove, None, ObserverStokesCoefficient)
ObserverStokesCoefficient_swigregister = _stokes_coefficient.ObserverStokesCoefficient_swigregister
ObserverStokesCoefficient_swigregister(ObserverStokesCoefficient)

class StokesCoefficient(full_physics_swig.state_vector.StateVectorObserver, ObservableStokesCoefficient):
    """

    This class maintains the stokes coefficient portion of the state.

    C++ includes: stokes_coefficient.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stokes_coefficient.delete_StokesCoefficient

    def _v_stokes_coefficient(self):
        """

        virtual ArrayAd<double, 2> FullPhysics::StokesCoefficient::stokes_coefficient() const =0
        Return Stokes coefficients used to go from Stokes vector to scalar
        reflectance.

        This is number_spectrometer() x 4, and is unit less.

        Note that is simple a matter of convenience that we have "4" rather
        than just number_stokes(). This happens to be how the stokes
        coefficients are given the Level 1 file. We only actually use the
        first number_stokes() coefficients. 
        """
        return _stokes_coefficient.StokesCoefficient__v_stokes_coefficient(self)


    @property
    def stokes_coefficient(self):
        return self._v_stokes_coefficient()


    def clone(self):
        """

        virtual boost::shared_ptr<StokesCoefficient> FullPhysics::StokesCoefficient::clone() const =0
        Clone a StokesCoefficient object.

        Note that the cloned version will not be attached to a StateVector or
        Observer<StokesCoefficient>, although you can of course attach them
        after receiving the cloned object.

        Because this isn't attached to the StateVector, one use of the clone
        operator is to create a "frozen" StokesCoefficient object. 
        """
        return _stokes_coefficient.StokesCoefficient_clone(self)

StokesCoefficient._v_stokes_coefficient = new_instancemethod(_stokes_coefficient.StokesCoefficient__v_stokes_coefficient, None, StokesCoefficient)
StokesCoefficient.clone = new_instancemethod(_stokes_coefficient.StokesCoefficient_clone, None, StokesCoefficient)
StokesCoefficient.__str__ = new_instancemethod(_stokes_coefficient.StokesCoefficient___str__, None, StokesCoefficient)
StokesCoefficient_swigregister = _stokes_coefficient.StokesCoefficient_swigregister
StokesCoefficient_swigregister(StokesCoefficient)



