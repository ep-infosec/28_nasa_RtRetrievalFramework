# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _solar_continuum_polynomial.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_solar_continuum_polynomial')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_solar_continuum_polynomial')
    _solar_continuum_polynomial = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_solar_continuum_polynomial', [dirname(__file__)])
        except ImportError:
            import _solar_continuum_polynomial
            return _solar_continuum_polynomial
        try:
            _mod = imp.load_module('_solar_continuum_polynomial', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _solar_continuum_polynomial = swig_import_helper()
    del swig_import_helper
else:
    import _solar_continuum_polynomial
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _solar_continuum_polynomial.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.solar_continuum_spectrum
import full_physics_swig.generic_object
class SolarContinuumPolynomial(full_physics_swig.solar_continuum_spectrum.SolarContinuumSpectrum):
    """

    This class calculates the solar continuum spectrum.

    This particular implementation uses a polynomial parametrization to
    calculate the Solar Planck Function.

    C++ includes: solar_continuum_polynomial.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Param, Convert_from_photon=True):
        """

        SolarContinuumPolynomial::SolarContinuumPolynomial(const ArrayWithUnit< double, 1 > &Param, bool
        Convert_from_photon=true)
        Constructor.

        There are two conventions used for the reported solar spectrum. For
        OCO, we give the results as ph/s/m^2/micron, while for GOSAT we
        convert using the number of photons at each wavenumber to give
        W/m^2/cm^-1. You can choose the convention used by specifying if we
        Convert_from_photon or not. 
        """
        _solar_continuum_polynomial.SolarContinuumPolynomial_swiginit(self, _solar_continuum_polynomial.new_SolarContinuumPolynomial(Param, Convert_from_photon))
    __swig_destroy__ = _solar_continuum_polynomial.delete_SolarContinuumPolynomial
SolarContinuumPolynomial_swigregister = _solar_continuum_polynomial.SolarContinuumPolynomial_swigregister
SolarContinuumPolynomial_swigregister(SolarContinuumPolynomial)



