# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _model_state.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_model_state')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_model_state')
    _model_state = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_model_state', [dirname(__file__)])
        except ImportError:
            import _model_state
            return _model_state
        try:
            _mod = imp.load_module('_model_state', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _model_state = swig_import_helper()
    del swig_import_helper
else:
    import _model_state
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _model_state.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.problem_state
import full_physics_swig.generic_object
class ModelState(full_physics_swig.problem_state.ProblemState):
    """

    The state for a parametrized mathematical model (a vector function)
    and its Jacobian.

    This class is used as a state for a mathematical model and not an
    optimization problem.

    Given NLLSProblemState class it appears thath ModelState is redundant.
    After all, both classes just are designed to maintain a vector
    function and its Jacobian. Then why do we have two similar classes
    that are only different in their names or the names of some of their
    members?

    A parametrized mathematical model is not an optimization problem by
    itself; however, it is a component of an optimization problem when we
    try to fit the model to measured data.

    When a parametrized mathematical model appears in an optimization
    problem in the form of a Nonlinear Least Squares problem, the vector
    model function and its Jacobian are not the same as the vector
    residual function of the NLLS problem and its Jacobian. They are
    different, and they are very different when we use some statistical
    analysis method to fit the model to the measured data. In my judgment,
    emphasizing the differences and avoiding confusion are more important
    than redundancy in this case; therefore, I implemented ModelState as
    well as NLLSProblemState.

    C++ includes: model_state.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _model_state.delete_ModelState

    def set(self, s):
        """

        void ModelState::set(const ModelState &s)
        Makes self a copy of the input state.

        This method makes the object, for which it is called, a copy of the
        input state.

        Parameters:
        -----------

        s:  another ModelState 
        """
        return _model_state.ModelState_set(self, s)

ModelState.set = new_instancemethod(_model_state.ModelState_set, None, ModelState)
ModelState_swigregister = _model_state.ModelState_swigregister
ModelState_swigregister(ModelState)



