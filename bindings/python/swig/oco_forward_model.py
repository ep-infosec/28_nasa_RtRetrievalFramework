# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _oco_forward_model.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_oco_forward_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_oco_forward_model')
    _oco_forward_model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_oco_forward_model', [dirname(__file__)])
        except ImportError:
            import _oco_forward_model
            return _oco_forward_model
        try:
            _mod = imp.load_module('_oco_forward_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _oco_forward_model = swig_import_helper()
    del swig_import_helper
else:
    import _oco_forward_model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _oco_forward_model.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.forward_model
import full_physics_swig.generic_object
import full_physics_swig.named_spectrum
class OcoForwardModel(full_physics_swig.forward_model.ForwardModel, full_physics_swig.named_spectrum.ObservablePtrNamedSpectrum):
    """

    This is the forward model used form GOSAT/OCO.

    This is fairly general, we may want to rename this at some point if we
    use it for other instruments.

    C++ includes: oco_forward_model.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        OcoForwardModel::OcoForwardModel(const boost::shared_ptr< Instrument > &Inst, const boost::shared_ptr<
        SpectralWindow > &Spectral_window, const boost::shared_ptr< Level1b >
        &Level_1b, const boost::shared_ptr< RadiativeTransfer > &Rt, const
        boost::shared_ptr< SpectrumSampling > &Spectrum_sampling, const
        boost::shared_ptr< StateVector > &Sv, const std::vector< std::vector<
        boost::shared_ptr< SpectrumEffect > > > &Spectrum_effect=std::vector<
        std::vector< boost::shared_ptr< SpectrumEffect > > >())
        Constructor. 
        """
        _oco_forward_model.OcoForwardModel_swiginit(self, _oco_forward_model.new_OcoForwardModel(*args))
    __swig_destroy__ = _oco_forward_model.delete_OcoForwardModel

    @property
    def state_vector(self):
        return self._v_state_vector()


    def radiance(self, Spec_index, Skip_jacobian=False):
        """

        Spectrum OcoForwardModel::radiance(int Spec_index, bool Skip_jacobian=false) const

        """
        return _oco_forward_model.OcoForwardModel_radiance(self, Spec_index, Skip_jacobian)


    def _v_instrument(self, *args):
        """

        void FullPhysics::OcoForwardModel::instrument(const boost::shared_ptr< Instrument > &V)

        """
        return _oco_forward_model.OcoForwardModel__v_instrument(self, *args)


    @property
    def instrument(self):
        return self._v_instrument()

    @instrument.setter
    def instrument(self, value):
      self._v_instrument(value)


    def _v_spectral_window(self, *args):
        """

        void FullPhysics::OcoForwardModel::spectral_window(const boost::shared_ptr< SpectralWindow > &V)

        """
        return _oco_forward_model.OcoForwardModel__v_spectral_window(self, *args)


    @property
    def spectral_window(self):
        return self._v_spectral_window()

    @spectral_window.setter
    def spectral_window(self, value):
      self._v_spectral_window(value)


    def _v_level_1b(self, *args):
        """

        void FullPhysics::OcoForwardModel::level_1b(const boost::shared_ptr< Level1b > &V)

        """
        return _oco_forward_model.OcoForwardModel__v_level_1b(self, *args)


    @property
    def level_1b(self):
        return self._v_level_1b()

    @level_1b.setter
    def level_1b(self, value):
      self._v_level_1b(value)


    def _v_radiative_transfer(self, *args):
        """

        void FullPhysics::OcoForwardModel::radiative_transfer(const boost::shared_ptr< RadiativeTransfer > &V)

        """
        return _oco_forward_model.OcoForwardModel__v_radiative_transfer(self, *args)


    @property
    def radiative_transfer(self):
        return self._v_radiative_transfer()

    @radiative_transfer.setter
    def radiative_transfer(self, value):
      self._v_radiative_transfer(value)


    def _v_spectrum_sampling(self):
        """

        void FullPhysics::OcoForwardModel::spectrum_sampling(const boost::shared_ptr< SpectrumSampling > &V)

        """
        return _oco_forward_model.OcoForwardModel__v_spectrum_sampling(self)


    @property
    def spectrum_sampling(self):
        return self._v_spectrum_sampling()


    def _v_spectral_grid(self):
        """

        const boost::shared_ptr<ForwardModelSpectralGrid>& FullPhysics::OcoForwardModel::spectral_grid() const

        """
        return _oco_forward_model.OcoForwardModel__v_spectral_grid(self)


    @property
    def spectral_grid(self):
        return self._v_spectral_grid()


    def apply_spectrum_corrections(self, highres_spec, Spec_index):
        """

        Spectrum OcoForwardModel::apply_spectrum_corrections(const Spectrum &highres_spec, int Spec_index) const
        Applies corrections and modeling to modeled spectrum:

        Interpolation to uniform grid

        Application of spectrum effects

        Application of instrument model 
        """
        return _oco_forward_model.OcoForwardModel_apply_spectrum_corrections(self, highres_spec, Spec_index)


    def notify_spectrum_update(self, updated_spec, spec_name, Spec_index):
        """

        void OcoForwardModel::notify_spectrum_update(const Spectrum &updated_spec, const std::string &spec_name, int
        Spec_index) const

        """
        return _oco_forward_model.OcoForwardModel_notify_spectrum_update(self, updated_spec, spec_name, Spec_index)


    @property
    def speceff_size(self):
      return self._speceff_size()

    @property
    def spectrum_effect(self):
      res = []
      for i in range(self.speceff_size):
         res2 = []
         for j in range(self.speceff_size2(i)):
            res2.append(self.speceff_val(i,j))
         res.append(res2)
      return res

OcoForwardModel.radiance = new_instancemethod(_oco_forward_model.OcoForwardModel_radiance, None, OcoForwardModel)
OcoForwardModel._v_instrument = new_instancemethod(_oco_forward_model.OcoForwardModel__v_instrument, None, OcoForwardModel)
OcoForwardModel._v_spectral_window = new_instancemethod(_oco_forward_model.OcoForwardModel__v_spectral_window, None, OcoForwardModel)
OcoForwardModel._v_level_1b = new_instancemethod(_oco_forward_model.OcoForwardModel__v_level_1b, None, OcoForwardModel)
OcoForwardModel._v_radiative_transfer = new_instancemethod(_oco_forward_model.OcoForwardModel__v_radiative_transfer, None, OcoForwardModel)
OcoForwardModel._v_spectrum_sampling = new_instancemethod(_oco_forward_model.OcoForwardModel__v_spectrum_sampling, None, OcoForwardModel)
OcoForwardModel._v_spectral_grid = new_instancemethod(_oco_forward_model.OcoForwardModel__v_spectral_grid, None, OcoForwardModel)
OcoForwardModel.apply_spectrum_corrections = new_instancemethod(_oco_forward_model.OcoForwardModel_apply_spectrum_corrections, None, OcoForwardModel)
OcoForwardModel.notify_spectrum_update = new_instancemethod(_oco_forward_model.OcoForwardModel_notify_spectrum_update, None, OcoForwardModel)
OcoForwardModel._speceff_size = new_instancemethod(_oco_forward_model.OcoForwardModel__speceff_size, None, OcoForwardModel)
OcoForwardModel.speceff_size2 = new_instancemethod(_oco_forward_model.OcoForwardModel_speceff_size2, None, OcoForwardModel)
OcoForwardModel.speceff_val = new_instancemethod(_oco_forward_model.OcoForwardModel_speceff_val, None, OcoForwardModel)
OcoForwardModel_swigregister = _oco_forward_model.OcoForwardModel_swigregister
OcoForwardModel_swigregister(OcoForwardModel)



