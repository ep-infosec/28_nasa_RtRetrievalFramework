# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _spectrum.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spectrum')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spectrum')
    _spectrum = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spectrum', [dirname(__file__)])
        except ImportError:
            import _spectrum
            return _spectrum
        try:
            _mod = imp.load_module('_spectrum', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spectrum = swig_import_helper()
    del swig_import_helper
else:
    import _spectrum
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spectrum.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_spectrum.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_spectrum.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_spectrum.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_spectrum.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_spectrum.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_spectrum.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_spectrum.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_spectrum.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_spectrum.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_spectrum.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_spectrum.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_spectrum.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_spectrum.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_spectrum.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_spectrum.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_spectrum.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _spectrum.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _spectrum.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class Spectrum(full_physics_swig.generic_object.GenericObject):
    """

    This is a full spectrum, which contains a SpectralRange and
    SpectralDomain.

    The SpectralRange has a value, possibly with associated Jacobian
    and/or uncertainty, and units. The SpectralDomain has the
    wavenumber/wavelength of the spectrum.

    Note that there are a few closely related classes, with similar
    sounding names. See spectrum_doxygen for a description of each of
    these.

    C++ includes: spectrum.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Spec_domain, Spec_range):
        """

        FullPhysics::Spectrum::Spectrum()
        Default constructor needed for SWIG. 
        """
        _spectrum.Spectrum_swiginit(self, _spectrum.new_Spectrum(Spec_domain, Spec_range))

    def _v_spectral_domain(self):
        """

        SpectralDomain& FullPhysics::Spectrum::spectral_domain()

        """
        return _spectrum.Spectrum__v_spectral_domain(self)


    @property
    def spectral_domain(self):
        return self._v_spectral_domain()


    def _v_spectral_range(self):
        """

        SpectralRange& FullPhysics::Spectrum::spectral_range()

        """
        return _spectrum.Spectrum__v_spectral_range(self)


    @property
    def spectral_range(self):
        return self._v_spectral_range()


    @property
    def wavenumber(self):
        return self.spectral_domain.wavenumber()

    @property
    def wavelength(self):
        return self.spectral_domain.wavelength()

    @property
    def value(self):
        return self.spectral_range.data

    @property
    def units(self):
        return self.spectral_range.units


    __swig_destroy__ = _spectrum.delete_Spectrum
Spectrum.__str__ = new_instancemethod(_spectrum.Spectrum___str__, None, Spectrum)
Spectrum._v_spectral_domain = new_instancemethod(_spectrum.Spectrum__v_spectral_domain, None, Spectrum)
Spectrum._v_spectral_range = new_instancemethod(_spectrum.Spectrum__v_spectral_range, None, Spectrum)
Spectrum_swigregister = _spectrum.Spectrum_swigregister
Spectrum_swigregister(Spectrum)

class vector_spectrum(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _spectrum.vector_spectrum_swiginit(self, _spectrum.new_vector_spectrum(*args))
    __swig_destroy__ = _spectrum.delete_vector_spectrum
vector_spectrum.iterator = new_instancemethod(_spectrum.vector_spectrum_iterator, None, vector_spectrum)
vector_spectrum.__nonzero__ = new_instancemethod(_spectrum.vector_spectrum___nonzero__, None, vector_spectrum)
vector_spectrum.__bool__ = new_instancemethod(_spectrum.vector_spectrum___bool__, None, vector_spectrum)
vector_spectrum.__len__ = new_instancemethod(_spectrum.vector_spectrum___len__, None, vector_spectrum)
vector_spectrum.__getslice__ = new_instancemethod(_spectrum.vector_spectrum___getslice__, None, vector_spectrum)
vector_spectrum.__setslice__ = new_instancemethod(_spectrum.vector_spectrum___setslice__, None, vector_spectrum)
vector_spectrum.__delslice__ = new_instancemethod(_spectrum.vector_spectrum___delslice__, None, vector_spectrum)
vector_spectrum.__delitem__ = new_instancemethod(_spectrum.vector_spectrum___delitem__, None, vector_spectrum)
vector_spectrum.__getitem__ = new_instancemethod(_spectrum.vector_spectrum___getitem__, None, vector_spectrum)
vector_spectrum.__setitem__ = new_instancemethod(_spectrum.vector_spectrum___setitem__, None, vector_spectrum)
vector_spectrum.pop = new_instancemethod(_spectrum.vector_spectrum_pop, None, vector_spectrum)
vector_spectrum.append = new_instancemethod(_spectrum.vector_spectrum_append, None, vector_spectrum)
vector_spectrum.empty = new_instancemethod(_spectrum.vector_spectrum_empty, None, vector_spectrum)
vector_spectrum.size = new_instancemethod(_spectrum.vector_spectrum_size, None, vector_spectrum)
vector_spectrum.swap = new_instancemethod(_spectrum.vector_spectrum_swap, None, vector_spectrum)
vector_spectrum.begin = new_instancemethod(_spectrum.vector_spectrum_begin, None, vector_spectrum)
vector_spectrum.end = new_instancemethod(_spectrum.vector_spectrum_end, None, vector_spectrum)
vector_spectrum.rbegin = new_instancemethod(_spectrum.vector_spectrum_rbegin, None, vector_spectrum)
vector_spectrum.rend = new_instancemethod(_spectrum.vector_spectrum_rend, None, vector_spectrum)
vector_spectrum.clear = new_instancemethod(_spectrum.vector_spectrum_clear, None, vector_spectrum)
vector_spectrum.get_allocator = new_instancemethod(_spectrum.vector_spectrum_get_allocator, None, vector_spectrum)
vector_spectrum.pop_back = new_instancemethod(_spectrum.vector_spectrum_pop_back, None, vector_spectrum)
vector_spectrum.erase = new_instancemethod(_spectrum.vector_spectrum_erase, None, vector_spectrum)
vector_spectrum.push_back = new_instancemethod(_spectrum.vector_spectrum_push_back, None, vector_spectrum)
vector_spectrum.front = new_instancemethod(_spectrum.vector_spectrum_front, None, vector_spectrum)
vector_spectrum.back = new_instancemethod(_spectrum.vector_spectrum_back, None, vector_spectrum)
vector_spectrum.assign = new_instancemethod(_spectrum.vector_spectrum_assign, None, vector_spectrum)
vector_spectrum.resize = new_instancemethod(_spectrum.vector_spectrum_resize, None, vector_spectrum)
vector_spectrum.insert = new_instancemethod(_spectrum.vector_spectrum_insert, None, vector_spectrum)
vector_spectrum.reserve = new_instancemethod(_spectrum.vector_spectrum_reserve, None, vector_spectrum)
vector_spectrum.capacity = new_instancemethod(_spectrum.vector_spectrum_capacity, None, vector_spectrum)
vector_spectrum_swigregister = _spectrum.vector_spectrum_swigregister
vector_spectrum_swigregister(vector_spectrum)



