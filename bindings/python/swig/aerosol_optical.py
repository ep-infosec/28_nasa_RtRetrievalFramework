# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _aerosol_optical.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_aerosol_optical')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_aerosol_optical')
    _aerosol_optical = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aerosol_optical', [dirname(__file__)])
        except ImportError:
            import _aerosol_optical
            return _aerosol_optical
        try:
            _mod = imp.load_module('_aerosol_optical', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _aerosol_optical = swig_import_helper()
    del swig_import_helper
else:
    import _aerosol_optical
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _aerosol_optical.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.pressure
import full_physics_swig.aerosol_extinction
import full_physics_swig.aerosol_property
import full_physics_swig.aerosol
class AerosolOptical(full_physics_swig.aerosol.Aerosol, full_physics_swig.pressure.ObserverPressure, full_physics_swig.aerosol_extinction.ObserverAerosolExtinction, full_physics_swig.aerosol_property.ObserverAerosolProperty):
    """

    Implementation of Aerosol.

    This particular implementation does the aerosol calculation by using
    the aerosol optical properties.

    C++ includes: aerosol_optical.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Aext, Aerosol_prop, Press, Rh, Reference_wn=1):
        """

        AerosolOptical::AerosolOptical(const std::vector< boost::shared_ptr< AerosolExtinction > > &Aext,
        const std::vector< boost::shared_ptr< AerosolProperty > >
        &Aerosol_prop, const boost::shared_ptr< Pressure > &Press, const
        boost::shared_ptr< RelativeHumidity > &Rh, double
        Reference_wn=1e4/0.755)
        Create an aerosol.

        Parameters:
        -----------

        Aext:  Aerosol extinction for each aerosol.

        Aerosol_prop:  Aerosol properties for each aerosol.

        Press:  The Pressure object that gives the pressure grid.

        Rh:  The RelativeHumidity object that gives the relative humidity.

        Reference_wn:  The wavenumber that Aext is given for. This is
        optional, the default value matches the reference band given in the
        ATB. 
        """
        _aerosol_optical.AerosolOptical_swiginit(self, _aerosol_optical.new_AerosolOptical(Aext, Aerosol_prop, Press, Rh, Reference_wn))

    def ssa_each_layer(self, *args):
        """

        ArrayAd< double, 1 > AerosolOptical::ssa_each_layer(double wn) const
        This gives the single scatter albedo for each layer, for the given
        wave number.

        Note this only includes the aerosol portion of this, Atmosphere class
        combines this with Rayleigh scattering.

        This calculates the derivatives with respect to the state vector.

        This has size of number_active_layer() 
        """
        return _aerosol_optical.AerosolOptical_ssa_each_layer(self, *args)


    def notify_update(self, *args):
        """

        virtual void FullPhysics::AerosolOptical::notify_update(const AerosolProperty &A)

        """
        return _aerosol_optical.AerosolOptical_notify_update(self, *args)


    def pf_mom(self, *args):
        """

        ArrayAd< double, 3 > AerosolOptical::pf_mom(double wn, const ArrayAd< double, 2 > &frac_aer, int nummom=-1, int
        numscat=-1) const

        """
        return _aerosol_optical.AerosolOptical_pf_mom(self, *args)


    def _v_number_particle(self):
        """

        virtual int FullPhysics::AerosolOptical::number_particle() const

        """
        return _aerosol_optical.AerosolOptical__v_number_particle(self)


    @property
    def number_particle(self):
        return self._v_number_particle()


    def aerosol_optical_depth(self, *args):
        """

        double AerosolOptical::aerosol_optical_depth(int aer_idx, double pmin=std::numeric_limits< double >::min(), double
        pmax=std::numeric_limits< double >::max()) const
        This gives the total aerosol optical depth for a given particle.

        You can optionally supply the pressure range to use, this will report
        the aod for the levels that fall in that range. The default is to use
        everything. 
        """
        return _aerosol_optical.AerosolOptical_aerosol_optical_depth(self, *args)


    def aerosol_optical_depth_total(self, *args):
        """

        double AerosolOptical::aerosol_optical_depth_total(double pmin=std::numeric_limits< double >::min(), double
        pmax=std::numeric_limits< double >::max()) const
        This gives the total optical depth for each particle, plus adds the
        total optical depth for all particles as the 1st entry.

        This may seem a bit odd, but this is what is expected as output to the
        HDF file.

        You can optionally supply the pressure range to use, this will report
        the aod for the levels that fall in that range. The default is to use
        everything. 
        """
        return _aerosol_optical.AerosolOptical_aerosol_optical_depth_total(self, *args)


    def clone(self, *args):
        """

        boost::shared_ptr< Aerosol > AerosolOptical::clone(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        RelativeHumidity > &Rh) const
        This version of clone takes a pressure to use.

        The intent is that the pressure has been cloned from the original
        pressure (although this class has no way to verify this). This allows
        sets of objects to be cloned using a common Pressure clone, e.g.
        Atmosphere. 
        """
        return _aerosol_optical.AerosolOptical_clone(self, *args)


    def _v_aerosol_name(self):
        """

        std::vector< std::string > AerosolOptical::aerosol_name() const
        Name of aerosols. 
        """
        return _aerosol_optical.AerosolOptical__v_aerosol_name(self)


    @property
    def aerosol_name(self):
        return self._v_aerosol_name()


    def _v_aerosol_name_arr(self):
        """

        blitz::Array< std::string, 1 > AerosolOptical::aerosol_name_arr() const
        Aerosol names, plus the string "total" as the 1st entry.

        This matches what is returned by
        aerosol_optical_depth_each_particle_and_total(). This may seem a bit
        odd, but this is what is expected as output to the HDF file.

        Note, this is returned as a blitz::Array rather than the more natural
        std::vector because this is what is needed to write this out to HDF.

        """
        return _aerosol_optical.AerosolOptical__v_aerosol_name_arr(self)


    @property
    def aerosol_name_arr(self):
        return self._v_aerosol_name_arr()


    def _v_pressure(self):
        """

        const boost::shared_ptr<Pressure>& FullPhysics::AerosolOptical::pressure() const
        Return pressure. 
        """
        return _aerosol_optical.AerosolOptical__v_pressure(self)


    @property
    def pressure(self):
        return self._v_pressure()


    def aerosol_extinction(self, *args):
        """

        void FullPhysics::AerosolOptical::aerosol_extinction(int i, const boost::shared_ptr< AerosolExtinction > &V)
        Set AerosolExtinction. 
        """
        return _aerosol_optical.AerosolOptical_aerosol_extinction(self, *args)


    def aerosol_property(self, *args):
        """

        void FullPhysics::AerosolOptical::aerosol_property(int i, const boost::shared_ptr< AerosolProperty > &V)
        Set AerosolProperty. 
        """
        return _aerosol_optical.AerosolOptical_aerosol_property(self, *args)

    __swig_destroy__ = _aerosol_optical.delete_AerosolOptical
AerosolOptical.ssa_each_layer = new_instancemethod(_aerosol_optical.AerosolOptical_ssa_each_layer, None, AerosolOptical)
AerosolOptical.notify_update = new_instancemethod(_aerosol_optical.AerosolOptical_notify_update, None, AerosolOptical)
AerosolOptical.pf_mom = new_instancemethod(_aerosol_optical.AerosolOptical_pf_mom, None, AerosolOptical)
AerosolOptical._v_number_particle = new_instancemethod(_aerosol_optical.AerosolOptical__v_number_particle, None, AerosolOptical)
AerosolOptical.aerosol_optical_depth = new_instancemethod(_aerosol_optical.AerosolOptical_aerosol_optical_depth, None, AerosolOptical)
AerosolOptical.aerosol_optical_depth_total = new_instancemethod(_aerosol_optical.AerosolOptical_aerosol_optical_depth_total, None, AerosolOptical)
AerosolOptical.clone = new_instancemethod(_aerosol_optical.AerosolOptical_clone, None, AerosolOptical)
AerosolOptical._v_aerosol_name = new_instancemethod(_aerosol_optical.AerosolOptical__v_aerosol_name, None, AerosolOptical)
AerosolOptical._v_aerosol_name_arr = new_instancemethod(_aerosol_optical.AerosolOptical__v_aerosol_name_arr, None, AerosolOptical)
AerosolOptical._v_pressure = new_instancemethod(_aerosol_optical.AerosolOptical__v_pressure, None, AerosolOptical)
AerosolOptical.aerosol_extinction = new_instancemethod(_aerosol_optical.AerosolOptical_aerosol_extinction, None, AerosolOptical)
AerosolOptical.aerosol_property = new_instancemethod(_aerosol_optical.AerosolOptical_aerosol_property, None, AerosolOptical)
AerosolOptical_swigregister = _aerosol_optical.AerosolOptical_swigregister
AerosolOptical_swigregister(AerosolOptical)



