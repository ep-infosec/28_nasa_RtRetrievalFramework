# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _iterative_solver_der.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_iterative_solver_der')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_iterative_solver_der')
    _iterative_solver_der = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iterative_solver_der', [dirname(__file__)])
        except ImportError:
            import _iterative_solver_der
            return _iterative_solver_der
        try:
            _mod = imp.load_module('_iterative_solver_der', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _iterative_solver_der = swig_import_helper()
    del swig_import_helper
else:
    import _iterative_solver_der
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _iterative_solver_der.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.iterative_solver
import full_physics_swig.generic_object
class IterativeSolverDer(full_physics_swig.iterative_solver.IterativeSolver):
    """

    The base class for all iterative optimizers that use first order
    derivatives.

    This class is the base class for iterative optimizers that use first
    order derivatives.

    Similar to its base class IterativeSolver, IterativeSolverDer is also
    not associated with any problem for the same reason mentioned in the
    comment section of IterativeSolver class.

    C++ includes: iterative_solver_der.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _iterative_solver_der.delete_IterativeSolverDer

    def _v_gradient_at_accepted_points(self):
        """

        virtual std::vector< blitz::Array<double, 1> > FullPhysics::IterativeSolverDer::gradient_at_accepted_points() const
        Returns a vector (std) of gradients evaluated at accepted points.

        This method returns a std vector of gradients computed at the accepted
        points. In other words, if the accepted points and the computed
        gradients at these points are recorded correctly, then
        gradient_at_accepted_points()[0] is the gradient of the cost function
        evaluated at accepted_points()[0]

        gradient_at_accepted_points()[1] is the gradient of the cost function
        evaluated at accepted_points()[1]

        ...

        and finally gradient_at_accepted_points()[num_accepted_steps()] is the
        gradient of the cost function evaluated at
        accepted_points()[num_accepted_steps()] 
        """
        return _iterative_solver_der.IterativeSolverDer__v_gradient_at_accepted_points(self)


    @property
    def gradient_at_accepted_points(self):
        return self._v_gradient_at_accepted_points()


    def record_gradient_at_accepted_point(self, gradient):
        """

        void FullPhysics::IterativeSolverDer::record_gradient_at_accepted_point(const blitz::Array< double, 1 > &gradient)
        For recording the gradient of the cost function evaluated at an
        accepted point.

        This method is called to record the gradient of the cost function
        evaluated at an accepted point. It is the responsibility of the
        implementer of the solve() method to record the gradients evaluated at
        the accepted points. The gradients must be recorded in the same order
        that they are evaluated.

        Parameters:
        -----------

        gradient:  gradient of the cost function evaluated at an accepted
        point in the parameter space 
        """
        return _iterative_solver_der.IterativeSolverDer_record_gradient_at_accepted_point(self, gradient)

IterativeSolverDer._v_gradient_at_accepted_points = new_instancemethod(_iterative_solver_der.IterativeSolverDer__v_gradient_at_accepted_points, None, IterativeSolverDer)
IterativeSolverDer.record_gradient_at_accepted_point = new_instancemethod(_iterative_solver_der.IterativeSolverDer_record_gradient_at_accepted_point, None, IterativeSolverDer)
IterativeSolverDer_swigregister = _iterative_solver_der.IterativeSolverDer_swigregister
IterativeSolverDer_swigregister(IterativeSolverDer)



