# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _instrument.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_instrument')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_instrument')
    _instrument = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_instrument', [dirname(__file__)])
        except ImportError:
            import _instrument
            return _instrument
        try:
            _mod = imp.load_module('_instrument', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _instrument = swig_import_helper()
    del swig_import_helper
else:
    import _instrument
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _instrument.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
import full_physics_swig.state_vector
class ObservableInstrument(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _instrument.delete_ObservableInstrument
ObservableInstrument.add_observer_and_keep_reference = new_instancemethod(_instrument.ObservableInstrument_add_observer_and_keep_reference, None, ObservableInstrument)
ObservableInstrument.add_observer = new_instancemethod(_instrument.ObservableInstrument_add_observer, None, ObservableInstrument)
ObservableInstrument.remove_observer = new_instancemethod(_instrument.ObservableInstrument_remove_observer, None, ObservableInstrument)
ObservableInstrument_swigregister = _instrument.ObservableInstrument_swigregister
ObservableInstrument_swigregister(ObservableInstrument)

class ObserverInstrument(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _instrument.ObserverInstrument_swiginit(self, _instrument.new_ObserverInstrument())
    __swig_destroy__ = _instrument.delete_ObserverInstrument
ObserverInstrument.notify_update = new_instancemethod(_instrument.ObserverInstrument_notify_update, None, ObserverInstrument)
ObserverInstrument.notify_add = new_instancemethod(_instrument.ObserverInstrument_notify_add, None, ObserverInstrument)
ObserverInstrument.notify_remove = new_instancemethod(_instrument.ObserverInstrument_notify_remove, None, ObserverInstrument)
ObserverInstrument_swigregister = _instrument.ObserverInstrument_swigregister
ObserverInstrument_swigregister(ObserverInstrument)

class Instrument(full_physics_swig.state_vector.StateVectorObserver, ObservableInstrument):
    """

    This applies a instrument model to radiances.

    C++ includes: instrument.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _instrument.delete_Instrument

    def clone(self):
        """

        virtual boost::shared_ptr<Instrument> FullPhysics::Instrument::clone() const =0
        Clone an Instrument object.

        Note that the cloned version will not be attached to and StateVector
        or Observer<Instrument>, although you can of course attach them after
        receiving the cloned object.

        Because this isn't attached to the StateVector, one use of the clone
        operator is to create a "frozen" Instrument object. 
        """
        return _instrument.Instrument_clone(self)


    def apply_instrument_model(self, High_resolution_spectrum, Pixel_list, Spec_index):
        """

        virtual Spectrum FullPhysics::Instrument::apply_instrument_model(const Spectrum &High_resolution_spectrum, const std::vector< int >
        &Pixel_list, int Spec_index) const =0
        Apply the instrument model to both the radiance and derivatives.

        Parameters:
        -----------

        High_resolution_spectrum:  High resolution spectrum.

        Pixel_list:  List of pixels to include in radiance

        Spec_index:  Spectral index

        Spectrum with instrument model applied. 
        """
        return _instrument.Instrument_apply_instrument_model(self, High_resolution_spectrum, Pixel_list, Spec_index)


    def _v_number_spectrometer(self):
        """

        virtual int FullPhysics::Instrument::number_spectrometer() const =0
        Give number of spectrometers. 
        """
        return _instrument.Instrument__v_number_spectrometer(self)


    @property
    def number_spectrometer(self):
        return self._v_number_spectrometer()


    def pixel_spectral_domain(self, Spec_index):
        """

        virtual SpectralDomain FullPhysics::Instrument::pixel_spectral_domain(int Spec_index) const =0
        This is the pixel wavenumber/wavelength for each pixel. 
        """
        return _instrument.Instrument_pixel_spectral_domain(self, Spec_index)


    def band_name(self, Spec_index):
        """

        virtual std::string FullPhysics::Instrument::band_name(int Spec_index) const =0
        Band name for given Spec_index. 
        """
        return _instrument.Instrument_band_name(self, Spec_index)


    def hdf_band_name(self, Spec_index):
        """

        virtual std::string FullPhysics::Instrument::hdf_band_name(int Spec_index) const
        In general, the name used in HDF files for a particular band is
        similar but not identical to the more human readable band_name.

        For example, with GOSAT we use the HDF field name "weak_co2", but
        the band name is "WC-Band". This gives the HDF name to use.

        The default implementation just returns the same string as the band
        name. 
        """
        return _instrument.Instrument_hdf_band_name(self, Spec_index)


    def ils_half_width(self, *args):
        """

        virtual void FullPhysics::Instrument::ils_half_width(int Spec_index, DoubleWithUnit &half_width)=0

        """
        return _instrument.Instrument_ils_half_width(self, *args)

Instrument.__str__ = new_instancemethod(_instrument.Instrument___str__, None, Instrument)
Instrument.clone = new_instancemethod(_instrument.Instrument_clone, None, Instrument)
Instrument.apply_instrument_model = new_instancemethod(_instrument.Instrument_apply_instrument_model, None, Instrument)
Instrument._v_number_spectrometer = new_instancemethod(_instrument.Instrument__v_number_spectrometer, None, Instrument)
Instrument.pixel_spectral_domain = new_instancemethod(_instrument.Instrument_pixel_spectral_domain, None, Instrument)
Instrument.band_name = new_instancemethod(_instrument.Instrument_band_name, None, Instrument)
Instrument.hdf_band_name = new_instancemethod(_instrument.Instrument_hdf_band_name, None, Instrument)
Instrument.ils_half_width = new_instancemethod(_instrument.Instrument_ils_half_width, None, Instrument)
Instrument_swigregister = _instrument.Instrument_swigregister
Instrument_swigregister(Instrument)



