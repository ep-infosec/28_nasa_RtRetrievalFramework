# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _gas_absorption.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gas_absorption')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gas_absorption')
    _gas_absorption = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gas_absorption', [dirname(__file__)])
        except ImportError:
            import _gas_absorption
            return _gas_absorption
        try:
            _mod = imp.load_module('_gas_absorption', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gas_absorption = swig_import_helper()
    del swig_import_helper
else:
    import _gas_absorption
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gas_absorption.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_gas_absorption.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_gas_absorption.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_gas_absorption.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_gas_absorption.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_gas_absorption.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_gas_absorption.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_gas_absorption.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_gas_absorption.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_gas_absorption.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_gas_absorption.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_gas_absorption.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_gas_absorption.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_gas_absorption.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_gas_absorption.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_gas_absorption.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_gas_absorption.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _gas_absorption.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _gas_absorption.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class GasAbsorption(full_physics_swig.generic_object.GenericObject):
    """

    This class determine the gaseous absorption coefficient for a given
    wave number, temperature and pressure.

    C++ includes: gas_absorption.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gas_absorption.delete_GasAbsorption

    def have_data(self, wn):
        """

        virtual bool FullPhysics::GasAbsorption::have_data(double wn) const =0
        Return true if we have data for the given wave number.

        A particular gas might not have absorption coefficients for all
        spectral bands, e.g., ABSCO tables. 
        """
        return _gas_absorption.GasAbsorption_have_data(self, wn)


    def _v_broadener_name(self):
        """

        virtual std::string FullPhysics::GasAbsorption::broadener_name() const =0
        For some tables, we might have a broadener (e.g., "h2o").

        This returns the name of the broadener, if any. 
        """
        return _gas_absorption.GasAbsorption__v_broadener_name(self)


    @property
    def broadener_name(self):
        return self._v_broadener_name()


    def absorption_cross_section(self, *args):
        """

        virtual AutoDerivativeWithUnit<double> FullPhysics::GasAbsorption::absorption_cross_section(double Wn, const DoubleWithUnit &Press, const AutoDerivativeWithUnit<
        double > &Temp, const AutoDerivativeWithUnit< double > &Broadener_vmr)
        const =0
        This interpolates the ABSCO data to give absorption cross section for
        a given pressure, temperature, and broadener VMR.

        Parameters:
        -----------

        Wn:  wave number

        Press:  Pressure

        Temp:  Temperature

        Broadener_vmr:  Broadner VMR (e.g., H2O VMR). Not all tables will make
        use of this information.

        Absorption cross section in cm^2 / molecule 
        """
        return _gas_absorption.GasAbsorption_absorption_cross_section(self, *args)

GasAbsorption.__str__ = new_instancemethod(_gas_absorption.GasAbsorption___str__, None, GasAbsorption)
GasAbsorption.have_data = new_instancemethod(_gas_absorption.GasAbsorption_have_data, None, GasAbsorption)
GasAbsorption._v_broadener_name = new_instancemethod(_gas_absorption.GasAbsorption__v_broadener_name, None, GasAbsorption)
GasAbsorption.absorption_cross_section = new_instancemethod(_gas_absorption.GasAbsorption_absorption_cross_section, None, GasAbsorption)
GasAbsorption_swigregister = _gas_absorption.GasAbsorption_swigregister
GasAbsorption_swigregister(GasAbsorption)

class vector_gas_absorption(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _gas_absorption.vector_gas_absorption_swiginit(self, _gas_absorption.new_vector_gas_absorption(*args))
    __swig_destroy__ = _gas_absorption.delete_vector_gas_absorption
vector_gas_absorption.iterator = new_instancemethod(_gas_absorption.vector_gas_absorption_iterator, None, vector_gas_absorption)
vector_gas_absorption.__nonzero__ = new_instancemethod(_gas_absorption.vector_gas_absorption___nonzero__, None, vector_gas_absorption)
vector_gas_absorption.__bool__ = new_instancemethod(_gas_absorption.vector_gas_absorption___bool__, None, vector_gas_absorption)
vector_gas_absorption.__len__ = new_instancemethod(_gas_absorption.vector_gas_absorption___len__, None, vector_gas_absorption)
vector_gas_absorption.__getslice__ = new_instancemethod(_gas_absorption.vector_gas_absorption___getslice__, None, vector_gas_absorption)
vector_gas_absorption.__setslice__ = new_instancemethod(_gas_absorption.vector_gas_absorption___setslice__, None, vector_gas_absorption)
vector_gas_absorption.__delslice__ = new_instancemethod(_gas_absorption.vector_gas_absorption___delslice__, None, vector_gas_absorption)
vector_gas_absorption.__delitem__ = new_instancemethod(_gas_absorption.vector_gas_absorption___delitem__, None, vector_gas_absorption)
vector_gas_absorption.__getitem__ = new_instancemethod(_gas_absorption.vector_gas_absorption___getitem__, None, vector_gas_absorption)
vector_gas_absorption.__setitem__ = new_instancemethod(_gas_absorption.vector_gas_absorption___setitem__, None, vector_gas_absorption)
vector_gas_absorption.pop = new_instancemethod(_gas_absorption.vector_gas_absorption_pop, None, vector_gas_absorption)
vector_gas_absorption.append = new_instancemethod(_gas_absorption.vector_gas_absorption_append, None, vector_gas_absorption)
vector_gas_absorption.empty = new_instancemethod(_gas_absorption.vector_gas_absorption_empty, None, vector_gas_absorption)
vector_gas_absorption.size = new_instancemethod(_gas_absorption.vector_gas_absorption_size, None, vector_gas_absorption)
vector_gas_absorption.swap = new_instancemethod(_gas_absorption.vector_gas_absorption_swap, None, vector_gas_absorption)
vector_gas_absorption.begin = new_instancemethod(_gas_absorption.vector_gas_absorption_begin, None, vector_gas_absorption)
vector_gas_absorption.end = new_instancemethod(_gas_absorption.vector_gas_absorption_end, None, vector_gas_absorption)
vector_gas_absorption.rbegin = new_instancemethod(_gas_absorption.vector_gas_absorption_rbegin, None, vector_gas_absorption)
vector_gas_absorption.rend = new_instancemethod(_gas_absorption.vector_gas_absorption_rend, None, vector_gas_absorption)
vector_gas_absorption.clear = new_instancemethod(_gas_absorption.vector_gas_absorption_clear, None, vector_gas_absorption)
vector_gas_absorption.get_allocator = new_instancemethod(_gas_absorption.vector_gas_absorption_get_allocator, None, vector_gas_absorption)
vector_gas_absorption.pop_back = new_instancemethod(_gas_absorption.vector_gas_absorption_pop_back, None, vector_gas_absorption)
vector_gas_absorption.erase = new_instancemethod(_gas_absorption.vector_gas_absorption_erase, None, vector_gas_absorption)
vector_gas_absorption.push_back = new_instancemethod(_gas_absorption.vector_gas_absorption_push_back, None, vector_gas_absorption)
vector_gas_absorption.front = new_instancemethod(_gas_absorption.vector_gas_absorption_front, None, vector_gas_absorption)
vector_gas_absorption.back = new_instancemethod(_gas_absorption.vector_gas_absorption_back, None, vector_gas_absorption)
vector_gas_absorption.assign = new_instancemethod(_gas_absorption.vector_gas_absorption_assign, None, vector_gas_absorption)
vector_gas_absorption.resize = new_instancemethod(_gas_absorption.vector_gas_absorption_resize, None, vector_gas_absorption)
vector_gas_absorption.insert = new_instancemethod(_gas_absorption.vector_gas_absorption_insert, None, vector_gas_absorption)
vector_gas_absorption.reserve = new_instancemethod(_gas_absorption.vector_gas_absorption_reserve, None, vector_gas_absorption)
vector_gas_absorption.capacity = new_instancemethod(_gas_absorption.vector_gas_absorption_capacity, None, vector_gas_absorption)
vector_gas_absorption_swigregister = _gas_absorption.vector_gas_absorption_swigregister
vector_gas_absorption_swigregister(vector_gas_absorption)



