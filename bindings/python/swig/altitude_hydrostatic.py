# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _altitude_hydrostatic.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_altitude_hydrostatic')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_altitude_hydrostatic')
    _altitude_hydrostatic = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_altitude_hydrostatic', [dirname(__file__)])
        except ImportError:
            import _altitude_hydrostatic
            return _altitude_hydrostatic
        try:
            _mod = imp.load_module('_altitude_hydrostatic', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _altitude_hydrostatic = swig_import_helper()
    del swig_import_helper
else:
    import _altitude_hydrostatic
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _altitude_hydrostatic.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.altitude
import full_physics_swig.generic_object
import full_physics_swig.state_vector
class AltitudeHydrostatic(full_physics_swig.altitude.Altitude):
    """

    This class handles the calculation of the altitude an gravity
    constants, automatically updating with the surface pressure or
    temperature profile is updated.

    We do this by solving the hydrostatic equations.

    C++ includes: altitude_hydrostatic.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, P, T, Latitude, Surface_height):
        """

        AltitudeHydrostatic::AltitudeHydrostatic(const boost::shared_ptr< Pressure > &P, const boost::shared_ptr<
        Temperature > &T, const DoubleWithUnit &Latitude, const DoubleWithUnit
        &Surface_height, const int Num_sublayer=10)
        Constructor.

        Latitude for the surface point should be in degrees, and height in
        meters. 
        """
        _altitude_hydrostatic.AltitudeHydrostatic_swiginit(self, _altitude_hydrostatic.new_AltitudeHydrostatic(P, T, Latitude, Surface_height))

    def notify_update(self, *args):
        """

        virtual void FullPhysics::AltitudeHydrostatic::notify_update(const Temperature &T)
        For performance, we cache some data as we calculate it.

        This becomes stale when the temperature is changed, so we observe
        temperature and mark the cache when it changes. 
        """
        return _altitude_hydrostatic.AltitudeHydrostatic_notify_update(self, *args)


    def clone(self, *args):
        """

        boost::shared_ptr< Altitude > AltitudeHydrostatic::clone(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        Temperature > &Temp) const

        """
        return _altitude_hydrostatic.AltitudeHydrostatic_clone(self, *args)

    __swig_destroy__ = _altitude_hydrostatic.delete_AltitudeHydrostatic
AltitudeHydrostatic.notify_update = new_instancemethod(_altitude_hydrostatic.AltitudeHydrostatic_notify_update, None, AltitudeHydrostatic)
AltitudeHydrostatic.clone = new_instancemethod(_altitude_hydrostatic.AltitudeHydrostatic_clone, None, AltitudeHydrostatic)
AltitudeHydrostatic_swigregister = _altitude_hydrostatic.AltitudeHydrostatic_swigregister
AltitudeHydrostatic_swigregister(AltitudeHydrostatic)



