# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _bad_sample_noise_model.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bad_sample_noise_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bad_sample_noise_model')
    _bad_sample_noise_model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bad_sample_noise_model', [dirname(__file__)])
        except ImportError:
            import _bad_sample_noise_model
            return _bad_sample_noise_model
        try:
            _mod = imp.load_module('_bad_sample_noise_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bad_sample_noise_model = swig_import_helper()
    del swig_import_helper
else:
    import _bad_sample_noise_model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _bad_sample_noise_model.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.noise_model
import full_physics_swig.generic_object
class BadSampleNoiseModel(full_physics_swig.noise_model.NoiseModel):
    """

    When we have bad samples, we usually pass this to the spectral window
    to prevent the sample from even being used.

    However, it can be useful to instead include the bad sample but give
    it a really large noise value (e.g., you want the residual calculated
    for a ARP investigation, but don't want it to have any weight in the
    retrieval). This adapter class takes a underlying noise model, but
    changes the uncertainty for any value that is marked as a bad sample.

    C++ includes: bad_sample_noise_model.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Underlying_noise_model, Bad_sample_mask, Bad_sample_uncer):
        """

        FullPhysics::BadSampleNoiseModel::BadSampleNoiseModel(const boost::shared_ptr< NoiseModel > &Underlying_noise_model, const
        blitz::Array< T, 2 > &Bad_sample_mask, double Bad_sample_uncer)

        """
        _bad_sample_noise_model.BadSampleNoiseModel_swiginit(self, _bad_sample_noise_model.new_BadSampleNoiseModel(Underlying_noise_model, Bad_sample_mask, Bad_sample_uncer))

    def _v_bad_sample_uncertainty(self):
        """

        double FullPhysics::BadSampleNoiseModel::bad_sample_uncertainty() const

        """
        return _bad_sample_noise_model.BadSampleNoiseModel__v_bad_sample_uncertainty(self)


    @property
    def bad_sample_uncertainty(self):
        return self._v_bad_sample_uncertainty()


    def _v_underlying_noise_model(self):
        """

        const boost::shared_ptr<NoiseModel>& FullPhysics::BadSampleNoiseModel::underlying_noise_model() const

        """
        return _bad_sample_noise_model.BadSampleNoiseModel__v_underlying_noise_model(self)


    @property
    def underlying_noise_model(self):
        return self._v_underlying_noise_model()


    def _v_bad_sample_mask(self):
        """

        const blitz::Array<bool, 2>& FullPhysics::BadSampleNoiseModel::bad_sample_mask() const

        """
        return _bad_sample_noise_model.BadSampleNoiseModel__v_bad_sample_mask(self)


    @property
    def bad_sample_mask(self):
        return self._v_bad_sample_mask()

    __swig_destroy__ = _bad_sample_noise_model.delete_BadSampleNoiseModel
BadSampleNoiseModel._v_bad_sample_uncertainty = new_instancemethod(_bad_sample_noise_model.BadSampleNoiseModel__v_bad_sample_uncertainty, None, BadSampleNoiseModel)
BadSampleNoiseModel._v_underlying_noise_model = new_instancemethod(_bad_sample_noise_model.BadSampleNoiseModel__v_underlying_noise_model, None, BadSampleNoiseModel)
BadSampleNoiseModel._v_bad_sample_mask = new_instancemethod(_bad_sample_noise_model.BadSampleNoiseModel__v_bad_sample_mask, None, BadSampleNoiseModel)
BadSampleNoiseModel_swigregister = _bad_sample_noise_model.BadSampleNoiseModel_swigregister
BadSampleNoiseModel_swigregister(BadSampleNoiseModel)



