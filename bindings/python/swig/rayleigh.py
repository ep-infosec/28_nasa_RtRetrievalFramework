# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rayleigh.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rayleigh')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rayleigh')
    _rayleigh = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rayleigh', [dirname(__file__)])
        except ImportError:
            import _rayleigh
            return _rayleigh
        try:
            _mod = imp.load_module('_rayleigh', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rayleigh = swig_import_helper()
    del swig_import_helper
else:
    import _rayleigh
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _rayleigh.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.pressure
import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.temperature
import full_physics_swig.altitude
class ObservableRayleigh(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rayleigh.delete_ObservableRayleigh
ObservableRayleigh.add_observer_and_keep_reference = new_instancemethod(_rayleigh.ObservableRayleigh_add_observer_and_keep_reference, None, ObservableRayleigh)
ObservableRayleigh.add_observer = new_instancemethod(_rayleigh.ObservableRayleigh_add_observer, None, ObservableRayleigh)
ObservableRayleigh.remove_observer = new_instancemethod(_rayleigh.ObservableRayleigh_remove_observer, None, ObservableRayleigh)
ObservableRayleigh_swigregister = _rayleigh.ObservableRayleigh_swigregister
ObservableRayleigh_swigregister(ObservableRayleigh)

class ObserverRayleigh(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _rayleigh.ObserverRayleigh_swiginit(self, _rayleigh.new_ObserverRayleigh())
    __swig_destroy__ = _rayleigh.delete_ObserverRayleigh
ObserverRayleigh.notify_update = new_instancemethod(_rayleigh.ObserverRayleigh_notify_update, None, ObserverRayleigh)
ObserverRayleigh.notify_add = new_instancemethod(_rayleigh.ObserverRayleigh_notify_add, None, ObserverRayleigh)
ObserverRayleigh.notify_remove = new_instancemethod(_rayleigh.ObserverRayleigh_notify_remove, None, ObserverRayleigh)
ObserverRayleigh_swigregister = _rayleigh.ObserverRayleigh_swigregister
ObserverRayleigh_swigregister(ObserverRayleigh)

class Rayleigh(full_physics_swig.pressure.ObserverPressure, full_physics_swig.altitude.ObserverAltitude):
    """

    This class calculates the Rayleigh portion of the optical depth.

    C++ includes: rayleigh.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Pres, Alt, C):
        """

        Rayleigh::Rayleigh(const boost::shared_ptr< Pressure > &Pres, const std::vector<
        boost::shared_ptr< Altitude > > &Alt, const Constant &C)
        Constructor. 
        """
        _rayleigh.Rayleigh_swiginit(self, _rayleigh.new_Rayleigh(Pres, Alt, C))

    def notify_update(self, *args):
        """

        virtual void FullPhysics::Rayleigh::notify_update(const Altitude &A)

        """
        return _rayleigh.Rayleigh_notify_update(self, *args)


    def optical_depth_each_layer(self, wn, spec_index):
        """

        ArrayAd< double, 1 > Rayleigh::optical_depth_each_layer(double wn, int spec_index) const
        This gives the optical depth for each layer, for the given wave
        number.

        Note this only includes the Rayleigh portion of this, Atmosphere class
        combines this with Absorbers and Aerosol scattering.

        This has size of pres->number_active_layer(). 
        """
        return _rayleigh.Rayleigh_optical_depth_each_layer(self, wn, spec_index)


    def cross_section(*args):
        """

        DoubleWithUnit Rayleigh::cross_section(const DoubleWithUnit &W, const Constant &C=DefaultConstant())
        Calculate the rayleigh cross section for the given
        wavenumber/wavelength. 
        """
        return _rayleigh.Rayleigh_cross_section(*args)

    cross_section = staticmethod(cross_section)
    __swig_destroy__ = _rayleigh.delete_Rayleigh
Rayleigh.notify_update = new_instancemethod(_rayleigh.Rayleigh_notify_update, None, Rayleigh)
Rayleigh.optical_depth_each_layer = new_instancemethod(_rayleigh.Rayleigh_optical_depth_each_layer, None, Rayleigh)
Rayleigh_swigregister = _rayleigh.Rayleigh_swigregister
Rayleigh_swigregister(Rayleigh)

def Rayleigh_cross_section(*args):
    """

    DoubleWithUnit Rayleigh::cross_section(const DoubleWithUnit &W, const Constant &C=DefaultConstant())
    Calculate the rayleigh cross section for the given
    wavenumber/wavelength. 
    """
    return _rayleigh.Rayleigh_cross_section(*args)



