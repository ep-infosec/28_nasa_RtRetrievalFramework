# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _reference_vmr_apriori.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_reference_vmr_apriori')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_reference_vmr_apriori')
    _reference_vmr_apriori = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_reference_vmr_apriori', [dirname(__file__)])
        except ImportError:
            import _reference_vmr_apriori
            return _reference_vmr_apriori
        try:
            _mod = imp.load_module('_reference_vmr_apriori', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _reference_vmr_apriori = swig_import_helper()
    del swig_import_helper
else:
    import _reference_vmr_apriori
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _reference_vmr_apriori.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class ReferenceVmrApriori(full_physics_swig.generic_object.GenericObject):
    """

    Creates a VMR profile for a gas using a set of dated reference VMRs
    with a known latitude.

    These VMRs are then modified as so: Resampled to effective altitudes

    Latitude gradient applied

    Secular trends applied

    Season cycle applied

    This class is based on the TCCON 2014 release of gsetup. As per those
    techniques, values are interpolated based on altitudes.

    NOTE: Inputs are expected to be in increasing altitude decreasing
    pressure order.

    Make sure gas names are capatilized.

    C++ includes: reference_vmr_apriori.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Model_pressure, Model_altitude, Model_temperature, Ref_altitude, Ref_latitude, Ref_time, Ref_tropopause_altitude, Obs_latitude, Obs_time):
        """

        ReferenceVmrApriori::ReferenceVmrApriori(const blitz::Array< double, 1 > &Model_pressure, const blitz::Array<
        double, 1 > &Model_altitude, const blitz::Array< double, 1 >
        &Model_temperature, const blitz::Array< double, 1 > &Ref_altitude,
        const double Ref_latitude, const Time &Ref_time, const double
        Ref_tropopause_altitude, const double Obs_latitude, const Time
        &Obs_time)

        """
        _reference_vmr_apriori.ReferenceVmrApriori_swiginit(self, _reference_vmr_apriori.new_ReferenceVmrApriori(Model_pressure, Model_altitude, Model_temperature, Ref_altitude, Ref_latitude, Ref_time, Ref_tropopause_altitude, Obs_latitude, Obs_time))

    def model_tropopause_altitude(self):
        """

        DoubleWithUnit ReferenceVmrApriori::model_tropopause_altitude() const
        Calculate the tropopause altitude for the model data used to initalize
        the class.

        Which is the first instance where the lapse rate exceeds -2K/km 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_model_tropopause_altitude(self)


    def effective_altitude(self):
        """

        const blitz::Array< double, 1 > ReferenceVmrApriori::effective_altitude() const
        Computes an altitude grid for resampling that takes into account a
        difference in the tropopause altitude for the target from the model.

        """
        return _reference_vmr_apriori.ReferenceVmrApriori_effective_altitude(self)


    def age_of_air(self, altitude):
        """

        const double ReferenceVmrApriori::age_of_air(const double altitude) const
        Computes the Age of Air at particular location (Altitude, Latitude)
        relative to the surface at 50N, where Age=0. 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_age_of_air(self, altitude)


    def resample_to_model_grid(self, vmr):
        """

        const blitz::Array< double, 1 > ReferenceVmrApriori::resample_to_model_grid(const blitz::Array< double, 1 > &vmr) const
        Resamples a VMR to the effective model altitude grid that accounts for
        the difference in tropopause altitudes. 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_resample_to_model_grid(self, vmr)


    def apply_latitude_gradient(self, vmr, gas_name):
        """

        const blitz::Array< double, 1 > ReferenceVmrApriori::apply_latitude_gradient(const blitz::Array< double, 1 > &vmr, const std::string &gas_name)
        const
        Modifies the vmr profiles to account for the difference in latitude
        between the observation latitude and the reference latitude.

        In the middle stratosphere, gas distributions are assumed symmetrical
        about equator. At the surface, gas distributions are assumed anti-
        symmetric about equator. At intermediate altitudes the profiles are
        interpolated between these limiting behaviors. 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_apply_latitude_gradient(self, vmr, gas_name)


    def apply_secular_trend(self, vmr, gas_name):
        """

        const blitz::Array< double, 1 > ReferenceVmrApriori::apply_secular_trend(const blitz::Array< double, 1 > &vmr, const std::string &gas_name)
        const
        Modifies the a priori profiles on a gas-by-gas basis to account for
        the difference in time between the observation/model and the reference
        vmrs.

        This includes the secular trend but not the seasonal cycle. 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_apply_secular_trend(self, vmr, gas_name)


    def apply_seasonal_cycle(self, vmr, gas_name):
        """

        const blitz::Array< double, 1 > ReferenceVmrApriori::apply_seasonal_cycle(const blitz::Array< double, 1 > &vmr, const std::string &gas_name)
        const
        Modifies the a priori vmr profile to account for the season of the
        observation/model. 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_apply_seasonal_cycle(self, vmr, gas_name)


    def apriori_vmr(self, vmr, gas_name):
        """

        const blitz::Array< double, 1 > ReferenceVmrApriori::apriori_vmr(const blitz::Array< double, 1 > &vmr, const std::string &gas_name)
        const
        Creates the a priori VMR using the various transformation methods of
        the class. 
        """
        return _reference_vmr_apriori.ReferenceVmrApriori_apriori_vmr(self, vmr, gas_name)

    __swig_destroy__ = _reference_vmr_apriori.delete_ReferenceVmrApriori
ReferenceVmrApriori.model_tropopause_altitude = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_model_tropopause_altitude, None, ReferenceVmrApriori)
ReferenceVmrApriori.effective_altitude = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_effective_altitude, None, ReferenceVmrApriori)
ReferenceVmrApriori.age_of_air = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_age_of_air, None, ReferenceVmrApriori)
ReferenceVmrApriori.resample_to_model_grid = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_resample_to_model_grid, None, ReferenceVmrApriori)
ReferenceVmrApriori.apply_latitude_gradient = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_apply_latitude_gradient, None, ReferenceVmrApriori)
ReferenceVmrApriori.apply_secular_trend = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_apply_secular_trend, None, ReferenceVmrApriori)
ReferenceVmrApriori.apply_seasonal_cycle = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_apply_seasonal_cycle, None, ReferenceVmrApriori)
ReferenceVmrApriori.apriori_vmr = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori_apriori_vmr, None, ReferenceVmrApriori)
ReferenceVmrApriori.__str__ = new_instancemethod(_reference_vmr_apriori.ReferenceVmrApriori___str__, None, ReferenceVmrApriori)
ReferenceVmrApriori_swigregister = _reference_vmr_apriori.ReferenceVmrApriori_swigregister
ReferenceVmrApriori_swigregister(ReferenceVmrApriori)



