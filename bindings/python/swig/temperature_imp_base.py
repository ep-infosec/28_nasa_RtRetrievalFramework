# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _temperature_imp_base.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_temperature_imp_base')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_temperature_imp_base')
    _temperature_imp_base = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_temperature_imp_base', [dirname(__file__)])
        except ImportError:
            import _temperature_imp_base
            return _temperature_imp_base
        try:
            _mod = imp.load_module('_temperature_imp_base', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _temperature_imp_base = swig_import_helper()
    del swig_import_helper
else:
    import _temperature_imp_base
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _temperature_imp_base.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.temperature
import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.sub_state_vector_array
class SubStateVectorArrayTemperature(full_physics_swig.temperature.Temperature, full_physics_swig.state_vector.SubStateVectorObserver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _temperature_imp_base.delete_SubStateVectorArrayTemperature

    @property
    def coefficient(self):
        return self._v_coefficient()


    @property
    def used_flag_value(self):
        return self._v_used_flag_value()


    @property
    def statevector_covariance(self):
        return self._v_statevector_covariance()


    @property
    def pressure(self):
        return self._v_pressure()

SubStateVectorArrayTemperature.init = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature_init, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature.state_vector_name_i = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature_state_vector_name_i, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature.update_sub_state_hook = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature_update_sub_state_hook, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature._v_coefficient = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature__v_coefficient, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature._v_used_flag_value = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature__v_used_flag_value, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature._v_statevector_covariance = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature__v_statevector_covariance, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature._v_pressure = new_instancemethod(_temperature_imp_base.SubStateVectorArrayTemperature__v_pressure, None, SubStateVectorArrayTemperature)
SubStateVectorArrayTemperature_swigregister = _temperature_imp_base.SubStateVectorArrayTemperature_swigregister
SubStateVectorArrayTemperature_swigregister(SubStateVectorArrayTemperature)

class TemperatureImpBase(SubStateVectorArrayTemperature):
    """

    As a design principle, we have each base class with the absolutely
    minimum interface needed for use from the rest of the system.

    This allows us to support any future code that supports this minimum
    interface.

    However, almost always you will want to derive from this class
    instead. See PressureImpBase for a more complete discussion of this.

    C++ includes: temperature_imp_base.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _temperature_imp_base.delete_TemperatureImpBase

    def clone(self, *args):
        """

        virtual boost::shared_ptr<Temperature> FullPhysics::TemperatureImpBase::clone(const boost::shared_ptr< Pressure > &Press) const =0

        """
        return _temperature_imp_base.TemperatureImpBase_clone(self, *args)


    def temperature(self, Press):
        """

        virtual AutoDerivativeWithUnit<double> FullPhysics::TemperatureImpBase::temperature(const AutoDerivativeWithUnit< double > &Press) const

        """
        return _temperature_imp_base.TemperatureImpBase_temperature(self, Press)


    def update_sub_state_hook(self):
        """

        virtual void FullPhysics::TemperatureImpBase::update_sub_state_hook()

        """
        return _temperature_imp_base.TemperatureImpBase_update_sub_state_hook(self)


    def print_desc(self, Os):
        """

        virtual void FullPhysics::TemperatureImpBase::print(std::ostream &Os) const
        Print to stream.

        The default calls the function "desc" that returns a string. This
        gives cleaner interface for deriving from this class in python, but
        most C++ classes will want to override this function rather than using
        desc. 
        """
        return _temperature_imp_base.TemperatureImpBase_print_desc(self, Os)


    def _v_desc(self):
        """

        virtual std::string FullPhysics::TemperatureImpBase::desc() const
        Description of object, to be printed to stream.

        This gives a cleaner interface for deriving from python. 
        """
        return _temperature_imp_base.TemperatureImpBase__v_desc(self)


    @property
    def desc(self):
        return self._v_desc()

    cache_stale = _swig_property(_temperature_imp_base.TemperatureImpBase_cache_stale_get, _temperature_imp_base.TemperatureImpBase_cache_stale_set)
    tgrid = _swig_property(_temperature_imp_base.TemperatureImpBase_tgrid_get, _temperature_imp_base.TemperatureImpBase_tgrid_set)

    def __init__(self, Coeff, Used_flag, Press, Mark_according_to_press=True, Pdep_start=0):
        if self.__class__ == TemperatureImpBase:
            _self = None
        else:
            _self = self
        _temperature_imp_base.TemperatureImpBase_swiginit(self, _temperature_imp_base.new_TemperatureImpBase(_self, Coeff, Used_flag, Press, Mark_according_to_press, Pdep_start))
    def __disown__(self):
        self.this.disown()
        _temperature_imp_base.disown_TemperatureImpBase(self)
        return weakref_proxy(self)
TemperatureImpBase.clone = new_instancemethod(_temperature_imp_base.TemperatureImpBase_clone, None, TemperatureImpBase)
TemperatureImpBase.temperature = new_instancemethod(_temperature_imp_base.TemperatureImpBase_temperature, None, TemperatureImpBase)
TemperatureImpBase.add_observer = new_instancemethod(_temperature_imp_base.TemperatureImpBase_add_observer, None, TemperatureImpBase)
TemperatureImpBase.remove_observer = new_instancemethod(_temperature_imp_base.TemperatureImpBase_remove_observer, None, TemperatureImpBase)
TemperatureImpBase.update_sub_state_hook = new_instancemethod(_temperature_imp_base.TemperatureImpBase_update_sub_state_hook, None, TemperatureImpBase)
TemperatureImpBase.print_desc = new_instancemethod(_temperature_imp_base.TemperatureImpBase_print_desc, None, TemperatureImpBase)
TemperatureImpBase._v_desc = new_instancemethod(_temperature_imp_base.TemperatureImpBase__v_desc, None, TemperatureImpBase)
TemperatureImpBase.mark_used = new_instancemethod(_temperature_imp_base.TemperatureImpBase_mark_used, None, TemperatureImpBase)
TemperatureImpBase.state_vector_name = new_instancemethod(_temperature_imp_base.TemperatureImpBase_state_vector_name, None, TemperatureImpBase)
TemperatureImpBase.notify_update = new_instancemethod(_temperature_imp_base.TemperatureImpBase_notify_update, None, TemperatureImpBase)
TemperatureImpBase.notify_add = new_instancemethod(_temperature_imp_base.TemperatureImpBase_notify_add, None, TemperatureImpBase)
TemperatureImpBase.notify_remove = new_instancemethod(_temperature_imp_base.TemperatureImpBase_notify_remove, None, TemperatureImpBase)
TemperatureImpBase.update_sub_state = new_instancemethod(_temperature_imp_base.TemperatureImpBase_update_sub_state, None, TemperatureImpBase)
TemperatureImpBase.state_vector_name_i = new_instancemethod(_temperature_imp_base.TemperatureImpBase_state_vector_name_i, None, TemperatureImpBase)
TemperatureImpBase.state_vector_name_sub = new_instancemethod(_temperature_imp_base.TemperatureImpBase_state_vector_name_sub, None, TemperatureImpBase)
TemperatureImpBase.calc_temperature_grid = new_instancemethod(_temperature_imp_base.TemperatureImpBase_calc_temperature_grid, None, TemperatureImpBase)
TemperatureImpBase_swigregister = _temperature_imp_base.TemperatureImpBase_swigregister
TemperatureImpBase_swigregister(TemperatureImpBase)



