# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _spectrum_sampling_fixed_spacing.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spectrum_sampling_fixed_spacing')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spectrum_sampling_fixed_spacing')
    _spectrum_sampling_fixed_spacing = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spectrum_sampling_fixed_spacing', [dirname(__file__)])
        except ImportError:
            import _spectrum_sampling_fixed_spacing
            return _spectrum_sampling_fixed_spacing
        try:
            _mod = imp.load_module('_spectrum_sampling_fixed_spacing', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spectrum_sampling_fixed_spacing = swig_import_helper()
    del swig_import_helper
else:
    import _spectrum_sampling_fixed_spacing
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _spectrum_sampling_fixed_spacing.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.spectrum_sampling
import full_physics_swig.generic_object
class SpectrumSamplingFixedSpacing(full_physics_swig.spectrum_sampling.SpectrumSampling):
    """

    This generates a spectrum sampling that covers all the high resolution
    points needed to create the spectral domain covered by the given
    Instrument, subject to the given low resolution grid.

    For each range in the spectrum, we produce equally spaced points.

    Note that there are a few closely related classes, with similar
    sounding names. See spectrum_doxygen for a description of each of
    these.

    C++ includes: spectrum_sampling_fixed_spacing.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Spec_spacing):
        """

        FullPhysics::SpectrumSamplingFixedSpacing::SpectrumSamplingFixedSpacing(const ArrayWithUnit< double, 1 > &Spec_spacing)

        """
        _spectrum_sampling_fixed_spacing.SpectrumSamplingFixedSpacing_swiginit(self, _spectrum_sampling_fixed_spacing.new_SpectrumSamplingFixedSpacing(Spec_spacing))
    __swig_destroy__ = _spectrum_sampling_fixed_spacing.delete_SpectrumSamplingFixedSpacing
SpectrumSamplingFixedSpacing_swigregister = _spectrum_sampling_fixed_spacing.SpectrumSamplingFixedSpacing_swigregister
SpectrumSamplingFixedSpacing_swigregister(SpectrumSamplingFixedSpacing)



