# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _convergence_check.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_convergence_check')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_convergence_check')
    _convergence_check = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_convergence_check', [dirname(__file__)])
        except ImportError:
            import _convergence_check
            return _convergence_check
        try:
            _mod = imp.load_module('_convergence_check', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _convergence_check = swig_import_helper()
    del swig_import_helper
else:
    import _convergence_check
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _convergence_check.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class FitStatistic(full_physics_swig.generic_object.GenericObject):
    """

    This class holds various parameters describing how good of a fit we
    have.

    This is pretty much just a structure to collect various statistics in
    one place.

    C++ includes: convergence_check.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NOT_SET = _convergence_check.FitStatistic_NOT_SET
    CONVERGE_ALL_BAND_OK = _convergence_check.FitStatistic_CONVERGE_ALL_BAND_OK
    CONVERGE_NOT_ALL_BAND_OK = _convergence_check.FitStatistic_CONVERGE_NOT_ALL_BAND_OK
    EXCEED_MAX_ITERATION = _convergence_check.FitStatistic_EXCEED_MAX_ITERATION
    EXCEED_MAX_DIVERGENT = _convergence_check.FitStatistic_EXCEED_MAX_DIVERGENT

    def __init__(self, *args):
        """

        FullPhysics::FitStatistic::FitStatistic(bool Fit_succeeded, OUTCOME Outcome, int Number_iteration, int
        Number_divergent, double D_sigma_sq, double D_sigma_sq_scaled, double
        Chisq_apriori, double Chisq_measured, double Chisq_apriori_fc, double
        Chisq_measured_fc)

        """
        _convergence_check.FitStatistic_swiginit(self, _convergence_check.new_FitStatistic(*args))
    fit_succeeded = _swig_property(_convergence_check.FitStatistic_fit_succeeded_get, _convergence_check.FitStatistic_fit_succeeded_set)
    outcome = _swig_property(_convergence_check.FitStatistic_outcome_get, _convergence_check.FitStatistic_outcome_set)
    number_iteration = _swig_property(_convergence_check.FitStatistic_number_iteration_get, _convergence_check.FitStatistic_number_iteration_set)
    number_divergent = _swig_property(_convergence_check.FitStatistic_number_divergent_get, _convergence_check.FitStatistic_number_divergent_set)
    d_sigma_sq = _swig_property(_convergence_check.FitStatistic_d_sigma_sq_get, _convergence_check.FitStatistic_d_sigma_sq_set)
    d_sigma_sq_scaled = _swig_property(_convergence_check.FitStatistic_d_sigma_sq_scaled_get, _convergence_check.FitStatistic_d_sigma_sq_scaled_set)

    def _v_gamma2(self):
        """

        double FullPhysics::FitStatistic::gamma2() const
        Parameter "gamma2", which is just chi2_apriori + chi2_measured. 
        """
        return _convergence_check.FitStatistic__v_gamma2(self)


    @property
    def gamma2(self):
        return self._v_gamma2()


    def _v_gamma2_fc(self):
        """

        double FullPhysics::FitStatistic::gamma2_fc() const
        Parameter "gamma2_fc", which is just chisq_apriori_fc +
        chisq_measured_fc. 
        """
        return _convergence_check.FitStatistic__v_gamma2_fc(self)


    @property
    def gamma2_fc(self):
        return self._v_gamma2_fc()

    chisq_apriori = _swig_property(_convergence_check.FitStatistic_chisq_apriori_get, _convergence_check.FitStatistic_chisq_apriori_set)
    chisq_measured = _swig_property(_convergence_check.FitStatistic_chisq_measured_get, _convergence_check.FitStatistic_chisq_measured_set)
    chisq_apriori_fc = _swig_property(_convergence_check.FitStatistic_chisq_apriori_fc_get, _convergence_check.FitStatistic_chisq_apriori_fc_set)
    chisq_measured_fc = _swig_property(_convergence_check.FitStatistic_chisq_measured_fc_get, _convergence_check.FitStatistic_chisq_measured_fc_set)

    def chisq_measure_norm(self, Residual, Residual_cov_diag):
        """

        double FullPhysics::FitStatistic::chisq_measure_norm(const blitz::Array< double, 1 > &Residual, const blitz::Array<
        double, 1 > &Residual_cov_diag) const
        Calculate chisq for given residual and covariance matrix. 
        """
        return _convergence_check.FitStatistic_chisq_measure_norm(self, Residual, Residual_cov_diag)


    def residual_abs_rms(self, Residual):
        """

        double FullPhysics::FitStatistic::residual_abs_rms(const blitz::Array< double, 1 > &Residual) const
        Calculate absolute root mean squared for given residual. 
        """
        return _convergence_check.FitStatistic_residual_abs_rms(self, Residual)


    def residual_rel_rms(self, Residual, Rad_measure):
        """

        double FullPhysics::FitStatistic::residual_rel_rms(const blitz::Array< double, 1 > &Residual, const blitz::Array<
        double, 1 > &Rad_measure) const
        Calculate relative root mean squared for given residual. 
        """
        return _convergence_check.FitStatistic_residual_rel_rms(self, Residual, Rad_measure)


    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.fit_succeeded,self.outcome,self.number_iteration,self.number_divergent,self.d_sigma_sq,self.d_sigma_sq_scaled,self.chisq_apriori,self.chisq_measured,self.chisq_apriori_fc,self.chisq_measured_fc)

    __swig_destroy__ = _convergence_check.delete_FitStatistic
FitStatistic._v_gamma2 = new_instancemethod(_convergence_check.FitStatistic__v_gamma2, None, FitStatistic)
FitStatistic._v_gamma2_fc = new_instancemethod(_convergence_check.FitStatistic__v_gamma2_fc, None, FitStatistic)
FitStatistic.chisq_measure_norm = new_instancemethod(_convergence_check.FitStatistic_chisq_measure_norm, None, FitStatistic)
FitStatistic.residual_abs_rms = new_instancemethod(_convergence_check.FitStatistic_residual_abs_rms, None, FitStatistic)
FitStatistic.residual_rel_rms = new_instancemethod(_convergence_check.FitStatistic_residual_rel_rms, None, FitStatistic)
FitStatistic.__str__ = new_instancemethod(_convergence_check.FitStatistic___str__, None, FitStatistic)
FitStatistic_swigregister = _convergence_check.FitStatistic_swigregister
FitStatistic_swigregister(FitStatistic)

class ConvergenceCheck(full_physics_swig.generic_object.GenericObject):
    """

    This class tests for convergence of a Levenberg-Marquardt solver.

    C++ includes: convergence_check.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _convergence_check.delete_ConvergenceCheck

    def initialize_check(self):
        """

        virtual void FullPhysics::ConvergenceCheck::initialize_check()
        Called before the first iteration, in case there is any setup.

        The default here does nothing, but derived classes can override this
        to do whatever initialization is needed. 
        """
        return _convergence_check.ConvergenceCheck_initialize_check(self)


    def convergence_check(self, fit_stat_last, fit_stat, has_converged, convergence_failed, gamma, step_diverged):
        """

        virtual void FullPhysics::ConvergenceCheck::convergence_check(const FitStatistic &fit_stat_last, FitStatistic &fit_stat, bool
        &has_converged, bool &convergence_failed, double &gamma, bool
        &step_diverged)=0
        Check for the convergence of a Solver, or if we have taken a divergent
        step.

        We pass in data from both this iteration and the last. If this is the
        first iteration, then the last values can be any kind of garbage value
        that is convenient (e.g., an empty Array) - we don't look at the
        value.

        Parameters:
        -----------

        fit_stat_last:   FitStatistic from the last iteration.

        fit_stat:   FitStatistic from this iteration. If we fail convergence,
        the class may update fit_stat.outcome with the reason for failing.

        has_converged:  On exit, true if we have converged to a solution.

        convergence_failed:  On exit, true if we have failed to converge and
        solver should just give up (e.g., we've exceeded a maximum number of
        iterations.

        gamma:  The Levenberg-Marquardt gamma parameter. On input this is
        value used in this iteration, on exit this is possibly updated to a
        new value.

        step_diverged:  On exit, this is true if the last iteration took a
        divergent step. In that case, we also update gamma to its new value.

        """
        return _convergence_check.ConvergenceCheck_convergence_check(self, fit_stat_last, fit_stat, has_converged, convergence_failed, gamma, step_diverged)


    def evaluate_quality(self, fit_stat, Residual, Residual_cov_diag):
        """

        virtual void FullPhysics::ConvergenceCheck::evaluate_quality(FitStatistic &fit_stat_last, const blitz::Array< double, 1 >
        &Residual, const blitz::Array< double, 1 > &Residual_cov_diag)=0
        Evaluates the quality of a converged fit from the residuals and
        expected residual error.

        Parameters:
        -----------

        fit_stat_last:   FitStatistic from the last iteration. An error should
        occur if fit_stat.fit_succeeded = False

        Residual:  The residual fit from the solver.

        Residual_cov_diag:  The expected error for the fit data. 
        """
        return _convergence_check.ConvergenceCheck_evaluate_quality(self, fit_stat, Residual, Residual_cov_diag)

ConvergenceCheck.__str__ = new_instancemethod(_convergence_check.ConvergenceCheck___str__, None, ConvergenceCheck)
ConvergenceCheck.initialize_check = new_instancemethod(_convergence_check.ConvergenceCheck_initialize_check, None, ConvergenceCheck)
ConvergenceCheck.convergence_check = new_instancemethod(_convergence_check.ConvergenceCheck_convergence_check, None, ConvergenceCheck)
ConvergenceCheck.evaluate_quality = new_instancemethod(_convergence_check.ConvergenceCheck_evaluate_quality, None, ConvergenceCheck)
ConvergenceCheck_swigregister = _convergence_check.ConvergenceCheck_swigregister
ConvergenceCheck_swigregister(ConvergenceCheck)



