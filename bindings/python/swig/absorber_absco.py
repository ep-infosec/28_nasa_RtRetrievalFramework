# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _absorber_absco.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_absorber_absco')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_absorber_absco')
    _absorber_absco = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_absorber_absco', [dirname(__file__)])
        except ImportError:
            import _absorber_absco
            return _absorber_absco
        try:
            _mod = imp.load_module('_absorber_absco', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _absorber_absco = swig_import_helper()
    del swig_import_helper
else:
    import _absorber_absco
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _absorber_absco.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.pressure
import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.temperature
import full_physics_swig.absorber_vmr
import full_physics_swig.altitude
import full_physics_swig.absorber
class AbsorberAbsco(full_physics_swig.absorber.Absorber, full_physics_swig.absorber_vmr.ObserverAbsorberVmr, full_physics_swig.pressure.ObserverPressure, full_physics_swig.temperature.ObserverTemperature, full_physics_swig.altitude.ObserverAltitude):
    """

    This class maintains the absorber portion of the state.

    This particular implementation uses the GasAbsorption classes for
    calculating the gas absorption (e.g, the Absco tables).

    C++ includes: absorber_absco.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Vmr, Press, Temp, Alt, Gas_absorption, C, Nsub=10):
        """

        AbsorberAbsco::AbsorberAbsco(const std::vector< boost::shared_ptr< AbsorberVmr > > Vmr, const
        boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        Temperature > &Temp, const std::vector< boost::shared_ptr< Altitude >
        > &Alt, const std::vector< boost::shared_ptr< GasAbsorption > >
        &Gas_absorption, const boost::shared_ptr< Constant > &C, int Nsub=10)
        Create an absorber. 
        """
        _absorber_absco.AbsorberAbsco_swiginit(self, _absorber_absco.new_AbsorberAbsco(Vmr, Press, Temp, Alt, Gas_absorption, C, Nsub))

    def integrand_independent_wn(self, Spec_index, Species_index, P):
        """

        AutoDerivativeWithUnit< double > AbsorberAbsco::integrand_independent_wn(int Spec_index, int Species_index, const DoubleWithUnit &P) const
        This is the portion of the optical depth calculation integrand that is
        independent on the wave number.

        We separate this out because we can calculate this portion once and
        cache it. This only changes if the Pressure, Temperature, Altitude, or
        VMR has changed (e.g., the state vector is updated). 
        """
        return _absorber_absco.AbsorberAbsco_integrand_independent_wn(self, Spec_index, Species_index, P)


    def integrand(self, wn, p, Spec_index, Species_index):
        """

        double AbsorberAbsco::integrand(double wn, double p, int Spec_index, int Species_index) const
        Integrand used in the absorption calculation.

        This is in Pa^-1. wn should be in cm^-1, and P in Pascals. 
        """
        return _absorber_absco.AbsorberAbsco_integrand(self, wn, p, Spec_index, Species_index)


    def optical_depth_each_layer_direct_integrate(self, *args):
        """

        blitz::Array< double, 2 > AbsorberAbsco::optical_depth_each_layer_direct_integrate(double wn, int Spec_index, double eps_abs=0, double eps_rel=1e-3)
        const
        Version of optical_depth_each_layer_direct_integrate that returns an
        array of species/layer like optical_depth_each_layer does. 
        """
        return _absorber_absco.AbsorberAbsco_optical_depth_each_layer_direct_integrate(self, *args)


    def _v_number_spectrometer(self):
        """

        virtual int FullPhysics::AbsorberAbsco::number_spectrometer() const

        """
        return _absorber_absco.AbsorberAbsco__v_number_spectrometer(self)


    def _v_number_layer(self):
        """

        virtual int FullPhysics::AbsorberAbsco::number_layer() const

        """
        return _absorber_absco.AbsorberAbsco__v_number_layer(self)


    def notify_update(self, *args):
        """

        virtual void FullPhysics::AbsorberAbsco::notify_update(const AbsorberVmr &A)

        """
        return _absorber_absco.AbsorberAbsco_notify_update(self, *args)


    def _v_specific_humidity_layer(self):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::specific_humidity_layer() const
        Returns specific humidity by layer. 
        """
        return _absorber_absco.AbsorberAbsco__v_specific_humidity_layer(self)


    @property
    def specific_humidity_layer(self):
        return self._v_specific_humidity_layer()


    def _v_dry_air_molecular_density_layer(self):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::dry_air_molecular_density_layer() const
        This is a helper function to compute the common part of the dry air
        mass and wet air mass routines.

        It returns dry air molecular density (per square meter) in the case
        where there is no water vapor. Returns units of molecules m^-2 
        """
        return _absorber_absco.AbsorberAbsco__v_dry_air_molecular_density_layer(self)


    @property
    def dry_air_molecular_density_layer(self):
        return self._v_dry_air_molecular_density_layer()


    def _v_dry_air_column_thickness_layer(self):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::dry_air_column_thickness_layer() const
        This is the dry air column thickness by layer.

        This is the size of pressure_grid() - 1. 
        """
        return _absorber_absco.AbsorberAbsco__v_dry_air_column_thickness_layer(self)


    @property
    def dry_air_column_thickness_layer(self):
        return self._v_dry_air_column_thickness_layer()


    def _v_wet_air_column_thickness_layer(self):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::wet_air_column_thickness_layer() const
        This is the wet air column thickness by layer.

        This is the size of pressure_grid() - 1. 
        """
        return _absorber_absco.AbsorberAbsco__v_wet_air_column_thickness_layer(self)


    @property
    def wet_air_column_thickness_layer(self):
        return self._v_wet_air_column_thickness_layer()


    def _v_pressure_weighting_function_layer(self):
        """

        ArrayAd< double, 1 > AbsorberAbsco::pressure_weighting_function_layer() const
        This is the pressure weighting function by layer.

        This is the size of pressure_grid() - 1. 
        """
        return _absorber_absco.AbsorberAbsco__v_pressure_weighting_function_layer(self)


    @property
    def pressure_weighting_function_layer(self):
        return self._v_pressure_weighting_function_layer()


    def _v_pressure_weighting_function_grid(self):
        """

        ArrayAd< double, 1 > AbsorberAbsco::pressure_weighting_function_grid() const
        This is the pressure weighting function by grid level.

        This is calculated so that: XCO2 = (co2 on grid levels) dot
        (press_wf_lev) 
        """
        return _absorber_absco.AbsorberAbsco__v_pressure_weighting_function_grid(self)


    @property
    def pressure_weighting_function_grid(self):
        return self._v_pressure_weighting_function_grid()


    def gas_column_thickness_layer(self, Gas_name):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::gas_column_thickness_layer(const std::string &Gas_name) const
        This is the column thickness of a gas by layer.

        This is the size of pressure_grid() - 1. 
        """
        return _absorber_absco.AbsorberAbsco_gas_column_thickness_layer(self, Gas_name)


    def gas_total_column_thickness(self, Gas_name):
        """

        AutoDerivativeWithUnit< double > AbsorberAbsco::gas_total_column_thickness(const std::string &Gas_name) const
        This is the total column thickness of a gas. 
        """
        return _absorber_absco.AbsorberAbsco_gas_total_column_thickness(self, Gas_name)


    def average_vmr(self, Gas_name):
        """

        AutoDerivative< double > AbsorberAbsco::average_vmr(const std::string &Gas_name) const
        Returns the simple average volume mixing ratio for a gas.

        The units returned are mole / mole, same as for vmr. 
        """
        return _absorber_absco.AbsorberAbsco_average_vmr(self, Gas_name)


    def clone(self, *args):
        """

        boost::shared_ptr< Absorber > AbsorberAbsco::clone(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        Temperature > &Temp, const std::vector< boost::shared_ptr< Altitude >
        > &Alt) const

        """
        return _absorber_absco.AbsorberAbsco_clone(self, *args)


    def gas_absorption(self, Gas_name):
        """

        boost::shared_ptr< GasAbsorption > AbsorberAbsco::gas_absorption_ptr(const std::string &Gas_name) const
        Return GasAbsorption as a pointer. 
        """
        return _absorber_absco.AbsorberAbsco_gas_absorption(self, Gas_name)


    def _v_pressure_sublayer(self):
        """

        ArrayWithUnit<double, 1> FullPhysics::AbsorberAbsco::pressure_sublayer() const
        Return the pressure we use for each sublayer.

        This is meant for diagnostic purposes. 
        """
        return _absorber_absco.AbsorberAbsco__v_pressure_sublayer(self)


    @property
    def pressure_sublayer(self):
        return self._v_pressure_sublayer()


    def _v_temperature_sublayer(self):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::temperature_sublayer() const
        Return the temperature we use for each sublayer.

        This is meant for diagnostic purposes. 
        """
        return _absorber_absco.AbsorberAbsco__v_temperature_sublayer(self)


    @property
    def temperature_sublayer(self):
        return self._v_temperature_sublayer()


    def _v_h2o_vmr_sublayer(self):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::h2o_vmr_sublayer() const
        Return the H2O volume mixing ratio we use for each sublayer.

        This is meant for diagnostic purposes. 
        """
        return _absorber_absco.AbsorberAbsco__v_h2o_vmr_sublayer(self)


    @property
    def h2o_vmr_sublayer(self):
        return self._v_h2o_vmr_sublayer()


    def vmr_sublayer(self, Gas_name):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::vmr_sublayer(const std::string &Gas_name) const
        Return the volume mixing ratio we use for each sublayer.

        This is meant for diagnostic purposes. 
        """
        return _absorber_absco.AbsorberAbsco_vmr_sublayer(self, Gas_name)


    def gravity_sublayer(self, Spec_index):
        """

        ArrayAdWithUnit< double, 1 > AbsorberAbsco::gravity_sublayer(int Spec_index) const
        Return the gravity we use for each sublayer.

        This is meant for diagnostic purposes. 
        """
        return _absorber_absco.AbsorberAbsco_gravity_sublayer(self, Spec_index)

    __swig_destroy__ = _absorber_absco.delete_AbsorberAbsco
AbsorberAbsco.integrand_independent_wn = new_instancemethod(_absorber_absco.AbsorberAbsco_integrand_independent_wn, None, AbsorberAbsco)
AbsorberAbsco.integrand = new_instancemethod(_absorber_absco.AbsorberAbsco_integrand, None, AbsorberAbsco)
AbsorberAbsco.optical_depth_each_layer_direct_integrate = new_instancemethod(_absorber_absco.AbsorberAbsco_optical_depth_each_layer_direct_integrate, None, AbsorberAbsco)
AbsorberAbsco._v_number_spectrometer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_number_spectrometer, None, AbsorberAbsco)
AbsorberAbsco._v_number_layer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_number_layer, None, AbsorberAbsco)
AbsorberAbsco.notify_update = new_instancemethod(_absorber_absco.AbsorberAbsco_notify_update, None, AbsorberAbsco)
AbsorberAbsco._v_specific_humidity_layer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_specific_humidity_layer, None, AbsorberAbsco)
AbsorberAbsco._v_dry_air_molecular_density_layer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_dry_air_molecular_density_layer, None, AbsorberAbsco)
AbsorberAbsco._v_dry_air_column_thickness_layer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_dry_air_column_thickness_layer, None, AbsorberAbsco)
AbsorberAbsco._v_wet_air_column_thickness_layer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_wet_air_column_thickness_layer, None, AbsorberAbsco)
AbsorberAbsco._v_pressure_weighting_function_layer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_pressure_weighting_function_layer, None, AbsorberAbsco)
AbsorberAbsco._v_pressure_weighting_function_grid = new_instancemethod(_absorber_absco.AbsorberAbsco__v_pressure_weighting_function_grid, None, AbsorberAbsco)
AbsorberAbsco.gas_column_thickness_layer = new_instancemethod(_absorber_absco.AbsorberAbsco_gas_column_thickness_layer, None, AbsorberAbsco)
AbsorberAbsco.gas_total_column_thickness = new_instancemethod(_absorber_absco.AbsorberAbsco_gas_total_column_thickness, None, AbsorberAbsco)
AbsorberAbsco.average_vmr = new_instancemethod(_absorber_absco.AbsorberAbsco_average_vmr, None, AbsorberAbsco)
AbsorberAbsco.clone = new_instancemethod(_absorber_absco.AbsorberAbsco_clone, None, AbsorberAbsco)
AbsorberAbsco.gas_absorption = new_instancemethod(_absorber_absco.AbsorberAbsco_gas_absorption, None, AbsorberAbsco)
AbsorberAbsco._v_pressure_sublayer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_pressure_sublayer, None, AbsorberAbsco)
AbsorberAbsco._v_temperature_sublayer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_temperature_sublayer, None, AbsorberAbsco)
AbsorberAbsco._v_h2o_vmr_sublayer = new_instancemethod(_absorber_absco.AbsorberAbsco__v_h2o_vmr_sublayer, None, AbsorberAbsco)
AbsorberAbsco.vmr_sublayer = new_instancemethod(_absorber_absco.AbsorberAbsco_vmr_sublayer, None, AbsorberAbsco)
AbsorberAbsco.gravity_sublayer = new_instancemethod(_absorber_absco.AbsorberAbsco_gravity_sublayer, None, AbsorberAbsco)
AbsorberAbsco_swigregister = _absorber_absco.AbsorberAbsco_swigregister
AbsorberAbsco_swigregister(AbsorberAbsco)



