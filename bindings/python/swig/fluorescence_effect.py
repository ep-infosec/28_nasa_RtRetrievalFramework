# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _fluorescence_effect.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fluorescence_effect')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fluorescence_effect')
    _fluorescence_effect = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fluorescence_effect', [dirname(__file__)])
        except ImportError:
            import _fluorescence_effect
            return _fluorescence_effect
        try:
            _mod = imp.load_module('_fluorescence_effect', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fluorescence_effect = swig_import_helper()
    del swig_import_helper
else:
    import _fluorescence_effect
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _fluorescence_effect.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.spectrum_effect_imp_base
import full_physics_swig.sub_state_vector_array
import full_physics_swig.generic_object
import full_physics_swig.spectrum_effect
class FluorescenceEffect(full_physics_swig.spectrum_effect_imp_base.SpectrumEffectImpBase):
    """

    Implements adding the effect of fluorescence to A-Band spectrum by
    using a retrievable across the band parametrization of the effect.

    C++ includes: fluorescence_effect.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Coeff, Used_flag, Atm, Stokes_coef, Sza, Spec_index, Reference, Retrieval_unit):
        """

        FluorescenceEffect::FluorescenceEffect(const blitz::Array< double, 1 > &Coeff, const blitz::Array< bool, 1 >
        &Used_flag, const boost::shared_ptr< RtAtmosphere > &Atm, const
        boost::shared_ptr< StokesCoefficient > &Stokes_coef, const
        DoubleWithUnit &Lza, const int Spec_index, const DoubleWithUnit
        &Reference, const Unit &Retrieval_unit)

        """
        _fluorescence_effect.FluorescenceEffect_swiginit(self, _fluorescence_effect.new_FluorescenceEffect(Coeff, Used_flag, Atm, Stokes_coef, Sza, Spec_index, Reference, Retrieval_unit))

    @property
    def name(self):
        return self._v_name()


    def _v_fluorescence_at_reference(self):
        """

        double FullPhysics::FluorescenceEffect::fluorescence_at_reference() const
        Fluorescence value at reference point. 
        """
        return _fluorescence_effect.FluorescenceEffect__v_fluorescence_at_reference(self)


    @property
    def fluorescence_at_reference(self):
        return self._v_fluorescence_at_reference()


    def _v_fluorescence_at_reference_uncertainty(self):
        """

        double FullPhysics::FluorescenceEffect::fluorescence_at_reference_uncertainty() const
        Assumed uncertainty of fluorescence at reference point. 
        """
        return _fluorescence_effect.FluorescenceEffect__v_fluorescence_at_reference_uncertainty(self)


    @property
    def fluorescence_at_reference_uncertainty(self):
        return self._v_fluorescence_at_reference_uncertainty()


    def _v_fluorescence_slope(self):
        """

        double FullPhysics::FluorescenceEffect::fluorescence_slope() const
        Fluorescence slope across band. 
        """
        return _fluorescence_effect.FluorescenceEffect__v_fluorescence_slope(self)


    @property
    def fluorescence_slope(self):
        return self._v_fluorescence_slope()


    def _v_fluorescence_slope_uncertainty(self):
        """

        double FullPhysics::FluorescenceEffect::fluorescence_slope_uncertainty() const
        Assumed uncertainty of fluorescence slope. 
        """
        return _fluorescence_effect.FluorescenceEffect__v_fluorescence_slope_uncertainty(self)


    @property
    def fluorescence_slope_uncertainty(self):
        return self._v_fluorescence_slope_uncertainty()

    __swig_destroy__ = _fluorescence_effect.delete_FluorescenceEffect
FluorescenceEffect._v_fluorescence_at_reference = new_instancemethod(_fluorescence_effect.FluorescenceEffect__v_fluorescence_at_reference, None, FluorescenceEffect)
FluorescenceEffect._v_fluorescence_at_reference_uncertainty = new_instancemethod(_fluorescence_effect.FluorescenceEffect__v_fluorescence_at_reference_uncertainty, None, FluorescenceEffect)
FluorescenceEffect._v_fluorescence_slope = new_instancemethod(_fluorescence_effect.FluorescenceEffect__v_fluorescence_slope, None, FluorescenceEffect)
FluorescenceEffect._v_fluorescence_slope_uncertainty = new_instancemethod(_fluorescence_effect.FluorescenceEffect__v_fluorescence_slope_uncertainty, None, FluorescenceEffect)
FluorescenceEffect_swigregister = _fluorescence_effect.FluorescenceEffect_swigregister
FluorescenceEffect_swigregister(FluorescenceEffect)



