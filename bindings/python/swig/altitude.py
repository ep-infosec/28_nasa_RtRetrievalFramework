# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _altitude.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_altitude')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_altitude')
    _altitude = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_altitude', [dirname(__file__)])
        except ImportError:
            import _altitude
            return _altitude
        try:
            _mod = imp.load_module('_altitude', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _altitude = swig_import_helper()
    del swig_import_helper
else:
    import _altitude
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _altitude.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_altitude.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_altitude.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_altitude.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_altitude.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_altitude.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_altitude.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_altitude.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_altitude.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_altitude.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_altitude.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_altitude.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_altitude.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_altitude.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_altitude.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_altitude.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_altitude.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _altitude.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _altitude.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
import full_physics_swig.state_vector
class ObservableAltitude(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _altitude.delete_ObservableAltitude
ObservableAltitude.add_observer_and_keep_reference = new_instancemethod(_altitude.ObservableAltitude_add_observer_and_keep_reference, None, ObservableAltitude)
ObservableAltitude.add_observer = new_instancemethod(_altitude.ObservableAltitude_add_observer, None, ObservableAltitude)
ObservableAltitude.remove_observer = new_instancemethod(_altitude.ObservableAltitude_remove_observer, None, ObservableAltitude)
ObservableAltitude_swigregister = _altitude.ObservableAltitude_swigregister
ObservableAltitude_swigregister(ObservableAltitude)

class ObserverAltitude(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _altitude.ObserverAltitude_swiginit(self, _altitude.new_ObserverAltitude())
    __swig_destroy__ = _altitude.delete_ObserverAltitude
ObserverAltitude.notify_update = new_instancemethod(_altitude.ObserverAltitude_notify_update, None, ObserverAltitude)
ObserverAltitude.notify_add = new_instancemethod(_altitude.ObserverAltitude_notify_add, None, ObserverAltitude)
ObserverAltitude.notify_remove = new_instancemethod(_altitude.ObserverAltitude_notify_remove, None, ObserverAltitude)
ObserverAltitude_swigregister = _altitude.ObserverAltitude_swigregister
ObserverAltitude_swigregister(ObserverAltitude)

class Altitude(ObservableAltitude):
    """

    The class handles the calculation of the altitude and gravity
    constants.

    Other objects may depend on the altitude, and should be updated when
    the altitude is updated. To facilitate that, this class in an
    Oberverable, and objects can add themselves as Observers to be
    notified when the temperature is updated.

    C++ includes: altitude.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _altitude.delete_Altitude

    def print_desc(self, Os):
        """

        virtual void FullPhysics::Altitude::print(std::ostream &Os) const

        """
        return _altitude.Altitude_print_desc(self, Os)


    def add_observer(self, Obs):
        """

        virtual void FullPhysics::Altitude::add_observer(Observer< Altitude > &Obs)

        """
        return _altitude.Altitude_add_observer(self, Obs)


    def remove_observer(self, Obs):
        """

        virtual void FullPhysics::Altitude::remove_observer(Observer< Altitude > &Obs)

        """
        return _altitude.Altitude_remove_observer(self, Obs)


    def altitude(self, P):
        """

        virtual AutoDerivativeWithUnit<double> FullPhysics::Altitude::altitude(const AutoDerivativeWithUnit< double > &P) const =0
        Return altitude grid for the given pressure. 
        """
        return _altitude.Altitude_altitude(self, P)


    def clone(self, *args):
        """

        virtual boost::shared_ptr<Altitude> FullPhysics::Altitude::clone(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        Temperature > &Temp) const =0
        This version of clone takes a pressure and temperature to use.

        The intent is that the pressure and temperature has been cloned from
        the original pressure and temperature (although this class has no way
        to verify this). This allows sets of objects to be cloned using a
        common Pressure and Temperature clone, e.g. Atmosphere. 
        """
        return _altitude.Altitude_clone(self, *args)


    def __init__(self):
        if self.__class__ == Altitude:
            _self = None
        else:
            _self = self
        _altitude.Altitude_swiginit(self, _altitude.new_Altitude(_self, ))
    def __disown__(self):
        self.this.disown()
        _altitude.disown_Altitude(self)
        return weakref_proxy(self)
Altitude.__str__ = new_instancemethod(_altitude.Altitude___str__, None, Altitude)
Altitude.print_desc = new_instancemethod(_altitude.Altitude_print_desc, None, Altitude)
Altitude.add_observer = new_instancemethod(_altitude.Altitude_add_observer, None, Altitude)
Altitude.remove_observer = new_instancemethod(_altitude.Altitude_remove_observer, None, Altitude)
Altitude.altitude = new_instancemethod(_altitude.Altitude_altitude, None, Altitude)
Altitude.gravity = new_instancemethod(_altitude.Altitude_gravity, None, Altitude)
Altitude.clone = new_instancemethod(_altitude.Altitude_clone, None, Altitude)
Altitude_swigregister = _altitude.Altitude_swigregister
Altitude_swigregister(Altitude)

class vector_altitude(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _altitude.vector_altitude_swiginit(self, _altitude.new_vector_altitude(*args))
    __swig_destroy__ = _altitude.delete_vector_altitude
vector_altitude.iterator = new_instancemethod(_altitude.vector_altitude_iterator, None, vector_altitude)
vector_altitude.__nonzero__ = new_instancemethod(_altitude.vector_altitude___nonzero__, None, vector_altitude)
vector_altitude.__bool__ = new_instancemethod(_altitude.vector_altitude___bool__, None, vector_altitude)
vector_altitude.__len__ = new_instancemethod(_altitude.vector_altitude___len__, None, vector_altitude)
vector_altitude.__getslice__ = new_instancemethod(_altitude.vector_altitude___getslice__, None, vector_altitude)
vector_altitude.__setslice__ = new_instancemethod(_altitude.vector_altitude___setslice__, None, vector_altitude)
vector_altitude.__delslice__ = new_instancemethod(_altitude.vector_altitude___delslice__, None, vector_altitude)
vector_altitude.__delitem__ = new_instancemethod(_altitude.vector_altitude___delitem__, None, vector_altitude)
vector_altitude.__getitem__ = new_instancemethod(_altitude.vector_altitude___getitem__, None, vector_altitude)
vector_altitude.__setitem__ = new_instancemethod(_altitude.vector_altitude___setitem__, None, vector_altitude)
vector_altitude.pop = new_instancemethod(_altitude.vector_altitude_pop, None, vector_altitude)
vector_altitude.append = new_instancemethod(_altitude.vector_altitude_append, None, vector_altitude)
vector_altitude.empty = new_instancemethod(_altitude.vector_altitude_empty, None, vector_altitude)
vector_altitude.size = new_instancemethod(_altitude.vector_altitude_size, None, vector_altitude)
vector_altitude.swap = new_instancemethod(_altitude.vector_altitude_swap, None, vector_altitude)
vector_altitude.begin = new_instancemethod(_altitude.vector_altitude_begin, None, vector_altitude)
vector_altitude.end = new_instancemethod(_altitude.vector_altitude_end, None, vector_altitude)
vector_altitude.rbegin = new_instancemethod(_altitude.vector_altitude_rbegin, None, vector_altitude)
vector_altitude.rend = new_instancemethod(_altitude.vector_altitude_rend, None, vector_altitude)
vector_altitude.clear = new_instancemethod(_altitude.vector_altitude_clear, None, vector_altitude)
vector_altitude.get_allocator = new_instancemethod(_altitude.vector_altitude_get_allocator, None, vector_altitude)
vector_altitude.pop_back = new_instancemethod(_altitude.vector_altitude_pop_back, None, vector_altitude)
vector_altitude.erase = new_instancemethod(_altitude.vector_altitude_erase, None, vector_altitude)
vector_altitude.push_back = new_instancemethod(_altitude.vector_altitude_push_back, None, vector_altitude)
vector_altitude.front = new_instancemethod(_altitude.vector_altitude_front, None, vector_altitude)
vector_altitude.back = new_instancemethod(_altitude.vector_altitude_back, None, vector_altitude)
vector_altitude.assign = new_instancemethod(_altitude.vector_altitude_assign, None, vector_altitude)
vector_altitude.resize = new_instancemethod(_altitude.vector_altitude_resize, None, vector_altitude)
vector_altitude.insert = new_instancemethod(_altitude.vector_altitude_insert, None, vector_altitude)
vector_altitude.reserve = new_instancemethod(_altitude.vector_altitude_reserve, None, vector_altitude)
vector_altitude.capacity = new_instancemethod(_altitude.vector_altitude_capacity, None, vector_altitude)
vector_altitude_swigregister = _altitude.vector_altitude_swigregister
vector_altitude_swigregister(vector_altitude)



