# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _cost_func_diff.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cost_func_diff')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cost_func_diff')
    _cost_func_diff = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cost_func_diff', [dirname(__file__)])
        except ImportError:
            import _cost_func_diff
            return _cost_func_diff
        try:
            _mod = imp.load_module('_cost_func_diff', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cost_func_diff = swig_import_helper()
    del swig_import_helper
else:
    import _cost_func_diff
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _cost_func_diff.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.cost_func
import full_physics_swig.problem_state
import full_physics_swig.generic_object
class CostFuncDiff(full_physics_swig.cost_func.CostFunc):
    """

    The base class for all problem classes that implement a cost function
    and its gradient.

    The class CostFuncDiff is the base class for all problem classes that
    implement a cost function (a scalar real function with a range that
    never includes negative numbers) and its gradient (first order
    derivatives).

    A cost function for which we can compute its gradient can be optimized
    by methods such as the steepest-descent-method and the conjugate-
    gradient-method as well as other optimization methods that only use
    the cost function (no derivatives).

    C++ includes: cost_func_diff.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cost_func_diff.delete_CostFuncDiff

    def _v_gradient(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::CostFuncDiff::gradient()=0
        The gradient of the cost function.

        This method must be implemented by the classes derived from this
        class.

        The parameters (the point in the parameter space) must have already
        been set before calling this method. The parameters are already set if
        one of the following methods is already called successfully:
        parameters() (see ProblemState class)

        cost_x() (see CostFunc class)

        gradient_x()

        cost_gradient_x()

        If the parameters are already set, then this method returns the
        gradient of the cost function at the current set point.

        The size of the gradient vector can be obtained in advance by calling
        gradient_size().

        The gradient of the cost function 
        """
        return _cost_func_diff.CostFuncDiff__v_gradient(self)


    @property
    def gradient(self):
        return self._v_gradient()


    def gradient_x(self, x):
        """

        virtual blitz::Array<double, 1> FullPhysics::CostFuncDiff::gradient_x(const blitz::Array< double, 1 > &x)
        The gradient function with parameters.

        This method also evaluates the gradient of the cost function; however,
        it sets the problem at the input new point and then evaluates the
        gradient.

        The size of the gradient vector can be obtained in advance by calling
        gradient_size().

        Parameters:
        -----------

        x:  New set of parameters

        The gradient of the cost function 
        """
        return _cost_func_diff.CostFuncDiff_gradient_x(self, x)


    def cost_gradient(self):
        """

        void CostFuncDiff::cost_gradient(double &c, blitz::Array< double, 1 > &g)
        The cost function and its gradient together.

        This method passes to the caller the evaluated cost function and its
        gradient at the current set point.

        The parameters (the point in the parameter space) must have already
        been set before calling this method. The parameters are already set if
        one of the following methods is already called successfully:
        parameters() (see ProblemState class)

        cost_x() (see CostFunc class)

        gradient_x()

        cost_gradient_x()

        Parameters:
        -----------

        c:  The cost function value

        g:  The gradient vector with size gradient_size() 
        """
        return _cost_func_diff.CostFuncDiff_cost_gradient(self)


    def cost_gradient_x(self, x):
        """

        virtual void FullPhysics::CostFuncDiff::cost_gradient_x(const blitz::Array< double, 1 > &x, double &c, blitz::Array< double,
        1 > &g)
        The cost function and its gradient with parameters.

        This method passes to the caller the evaluated cost function and its
        gradient after setting the problem at the input new point.

        Parameters:
        -----------

        x:  New set of parameters

        c:  The cost function value

        g:  The gradient vector with size gradient_size() 
        """
        return _cost_func_diff.CostFuncDiff_cost_gradient_x(self, x)


    def _v_num_der1_evaluations(self):
        """

        virtual int FullPhysics::CostFuncDiff::num_der1_evaluations() const
        Returns the number of the times gradient has been evaluated.

        The number of the times gradient has been evaluated. 
        """
        return _cost_func_diff.CostFuncDiff__v_num_der1_evaluations(self)


    @property
    def num_der1_evaluations(self):
        return self._v_num_der1_evaluations()


    def _v_gradient_size(self):
        """

        virtual int FullPhysics::CostFuncDiff::gradient_size() const
        Returns the size of the gradient vector.

        The size of the gradient vecotor 
        """
        return _cost_func_diff.CostFuncDiff__v_gradient_size(self)


    @property
    def gradient_size(self):
        return self._v_gradient_size()

CostFuncDiff._v_gradient = new_instancemethod(_cost_func_diff.CostFuncDiff__v_gradient, None, CostFuncDiff)
CostFuncDiff.gradient_x = new_instancemethod(_cost_func_diff.CostFuncDiff_gradient_x, None, CostFuncDiff)
CostFuncDiff.cost_gradient = new_instancemethod(_cost_func_diff.CostFuncDiff_cost_gradient, None, CostFuncDiff)
CostFuncDiff.cost_gradient_x = new_instancemethod(_cost_func_diff.CostFuncDiff_cost_gradient_x, None, CostFuncDiff)
CostFuncDiff._v_num_der1_evaluations = new_instancemethod(_cost_func_diff.CostFuncDiff__v_num_der1_evaluations, None, CostFuncDiff)
CostFuncDiff._v_gradient_size = new_instancemethod(_cost_func_diff.CostFuncDiff__v_gradient_size, None, CostFuncDiff)
CostFuncDiff_swigregister = _cost_func_diff.CostFuncDiff_swigregister
CostFuncDiff_swigregister(CostFuncDiff)



