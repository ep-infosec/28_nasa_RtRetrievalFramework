# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _acos_sounding_id.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_acos_sounding_id')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_acos_sounding_id')
    _acos_sounding_id = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_acos_sounding_id', [dirname(__file__)])
        except ImportError:
            import _acos_sounding_id
            return _acos_sounding_id
        try:
            _mod = imp.load_module('_acos_sounding_id', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _acos_sounding_id = swig_import_helper()
    del swig_import_helper
else:
    import _acos_sounding_id
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _acos_sounding_id.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_acos_sounding_id.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_acos_sounding_id.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_acos_sounding_id.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_acos_sounding_id.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_acos_sounding_id.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_acos_sounding_id.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_acos_sounding_id.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_acos_sounding_id.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_acos_sounding_id.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_acos_sounding_id.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _acos_sounding_id.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _acos_sounding_id.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.hdf_sounding_id
import full_physics_swig.generic_object
class AcosSoundingId(full_physics_swig.hdf_sounding_id.HdfSoundingId):
    """

    This class reads a given file, and extracts out the sounding
    information.

    This determine the index into the HDF file for the given sounding
    (referred to as "frame number"), and determines which sounding we
    are using (s or p), or if we are doing averaging.

    C++ includes: acos_sounding_id.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    S_SOUNDING = _acos_sounding_id.AcosSoundingId_S_SOUNDING
    P_SOUNDING = _acos_sounding_id.AcosSoundingId_P_SOUNDING
    __swig_destroy__ = _acos_sounding_id.delete_AcosSoundingId

    def __init__(self, File, Sounding_id, st):
        """

        AcosSoundingId::AcosSoundingId(const HdfFile &File, const std::string &Sounding_id, SoundingType
        Sounding_type)
        Read Hdf file and determine sounding id information.

        Parameters:
        -----------

        File:  The file to read.

        Sounding_id:  The sounding ID.

        Sounding_type:  Specify if we have S, P. 
        """
        _acos_sounding_id.AcosSoundingId_swiginit(self, _acos_sounding_id.new_AcosSoundingId(File, Sounding_id, st))

    def create(File, Sounding_id):
        """

        std::vector< boost::shared_ptr< HdfSoundingId > > AcosSoundingId::create(const HdfFile &File, const std::string &Sounding_id)
        Parse a sounding ID string.

        This string indicates if we are doing just a P retrieval, just a S
        retrieval, or averaging the two.

        The sounding ID should be in the format: 20090726171701S - use the S
        band

        20090726171701P - use the P band

        20090726171701 - Average the two bands

        This return a vector of AcosSoundingId, length 1 if we are not
        averaging or length 2 if we are averaging. 
        """
        return _acos_sounding_id.AcosSoundingId_create(File, Sounding_id)

    create = staticmethod(create)
AcosSoundingId_swigregister = _acos_sounding_id.AcosSoundingId_swigregister
AcosSoundingId_swigregister(AcosSoundingId)

def AcosSoundingId_create(File, Sounding_id):
    """

    std::vector< boost::shared_ptr< HdfSoundingId > > AcosSoundingId::create(const HdfFile &File, const std::string &Sounding_id)
    Parse a sounding ID string.

    This string indicates if we are doing just a P retrieval, just a S
    retrieval, or averaging the two.

    The sounding ID should be in the format: 20090726171701S - use the S
    band

    20090726171701P - use the P band

    20090726171701 - Average the two bands

    This return a vector of AcosSoundingId, length 1 if we are not
    averaging or length 2 if we are averaging. 
    """
    return _acos_sounding_id.AcosSoundingId_create(File, Sounding_id)

class vector_acos_sounding_id(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _acos_sounding_id.vector_acos_sounding_id_swiginit(self, _acos_sounding_id.new_vector_acos_sounding_id(*args))
    __swig_destroy__ = _acos_sounding_id.delete_vector_acos_sounding_id
vector_acos_sounding_id.iterator = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_iterator, None, vector_acos_sounding_id)
vector_acos_sounding_id.__nonzero__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___nonzero__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__bool__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___bool__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__len__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___len__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__getslice__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___getslice__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__setslice__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___setslice__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__delslice__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___delslice__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__delitem__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___delitem__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__getitem__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___getitem__, None, vector_acos_sounding_id)
vector_acos_sounding_id.__setitem__ = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id___setitem__, None, vector_acos_sounding_id)
vector_acos_sounding_id.pop = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_pop, None, vector_acos_sounding_id)
vector_acos_sounding_id.append = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_append, None, vector_acos_sounding_id)
vector_acos_sounding_id.empty = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_empty, None, vector_acos_sounding_id)
vector_acos_sounding_id.size = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_size, None, vector_acos_sounding_id)
vector_acos_sounding_id.swap = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_swap, None, vector_acos_sounding_id)
vector_acos_sounding_id.begin = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_begin, None, vector_acos_sounding_id)
vector_acos_sounding_id.end = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_end, None, vector_acos_sounding_id)
vector_acos_sounding_id.rbegin = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_rbegin, None, vector_acos_sounding_id)
vector_acos_sounding_id.rend = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_rend, None, vector_acos_sounding_id)
vector_acos_sounding_id.clear = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_clear, None, vector_acos_sounding_id)
vector_acos_sounding_id.get_allocator = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_get_allocator, None, vector_acos_sounding_id)
vector_acos_sounding_id.pop_back = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_pop_back, None, vector_acos_sounding_id)
vector_acos_sounding_id.erase = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_erase, None, vector_acos_sounding_id)
vector_acos_sounding_id.push_back = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_push_back, None, vector_acos_sounding_id)
vector_acos_sounding_id.front = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_front, None, vector_acos_sounding_id)
vector_acos_sounding_id.back = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_back, None, vector_acos_sounding_id)
vector_acos_sounding_id.assign = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_assign, None, vector_acos_sounding_id)
vector_acos_sounding_id.resize = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_resize, None, vector_acos_sounding_id)
vector_acos_sounding_id.insert = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_insert, None, vector_acos_sounding_id)
vector_acos_sounding_id.reserve = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_reserve, None, vector_acos_sounding_id)
vector_acos_sounding_id.capacity = new_instancemethod(_acos_sounding_id.vector_acos_sounding_id_capacity, None, vector_acos_sounding_id)
vector_acos_sounding_id_swigregister = _acos_sounding_id.vector_acos_sounding_id_swigregister
vector_acos_sounding_id_swigregister(vector_acos_sounding_id)



