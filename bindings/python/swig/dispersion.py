# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _dispersion.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dispersion')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dispersion')
    _dispersion = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dispersion', [dirname(__file__)])
        except ImportError:
            import _dispersion
            return _dispersion
        try:
            _mod = imp.load_module('_dispersion', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dispersion = swig_import_helper()
    del swig_import_helper
else:
    import _dispersion
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _dispersion.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.state_vector
import full_physics_swig.generic_object
class ObservableDispersion(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dispersion.delete_ObservableDispersion
ObservableDispersion.add_observer_and_keep_reference = new_instancemethod(_dispersion.ObservableDispersion_add_observer_and_keep_reference, None, ObservableDispersion)
ObservableDispersion.add_observer = new_instancemethod(_dispersion.ObservableDispersion_add_observer, None, ObservableDispersion)
ObservableDispersion.remove_observer = new_instancemethod(_dispersion.ObservableDispersion_remove_observer, None, ObservableDispersion)
ObservableDispersion_swigregister = _dispersion.ObservableDispersion_swigregister
ObservableDispersion_swigregister(ObservableDispersion)

class ObserverDispersion(full_physics_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _dispersion.ObserverDispersion_swiginit(self, _dispersion.new_ObserverDispersion())
    __swig_destroy__ = _dispersion.delete_ObserverDispersion
ObserverDispersion.notify_update = new_instancemethod(_dispersion.ObserverDispersion_notify_update, None, ObserverDispersion)
ObserverDispersion.notify_add = new_instancemethod(_dispersion.ObserverDispersion_notify_add, None, ObserverDispersion)
ObserverDispersion.notify_remove = new_instancemethod(_dispersion.ObserverDispersion_notify_remove, None, ObserverDispersion)
ObserverDispersion_swigregister = _dispersion.ObserverDispersion_swigregister
ObserverDispersion_swigregister(ObserverDispersion)

class Dispersion(full_physics_swig.state_vector.StateVectorObserver, ObservableDispersion):
    """

    This class calculates the wavenumber for each pixel in a single band
    of an Instrument.

    C++ includes: dispersion.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dispersion.delete_Dispersion

    def clone(self):
        """

        virtual boost::shared_ptr<Dispersion> FullPhysics::Dispersion::clone() const =0
        Clone an Dispersion object.

        Note that the cloned version will not be attached to and StateVector
        or Observer<Dispersion>, although you can of course attach them after
        receiving the cloned object.

        Because this isn't attached to the StateVector, one use of the clone
        operator is to create a "frozen" Dispersion object. 
        """
        return _dispersion.Dispersion_clone(self)


    def _v_pixel_grid(self):
        """

        virtual SpectralDomain FullPhysics::Dispersion::pixel_grid() const =0
        Returns as list of grid points for each instrument pixel, and the
        gradient of the points wrt the state vector.

        This is for the full instrument pixels, i.e., any windowing etc.
        happens in later processing. 
        """
        return _dispersion.Dispersion__v_pixel_grid(self)


    @property
    def pixel_grid(self):
        return self._v_pixel_grid()

Dispersion.clone = new_instancemethod(_dispersion.Dispersion_clone, None, Dispersion)
Dispersion._v_pixel_grid = new_instancemethod(_dispersion.Dispersion__v_pixel_grid, None, Dispersion)
Dispersion_swigregister = _dispersion.Dispersion_swigregister
Dispersion_swigregister(Dispersion)

class SubStateVectorArrayDispersion(Dispersion, full_physics_swig.state_vector.SubStateVectorObserver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dispersion.delete_SubStateVectorArrayDispersion

    @property
    def coefficient(self):
        return self._v_coefficient()


    @property
    def used_flag_value(self):
        return self._v_used_flag_value()


    @property
    def statevector_covariance(self):
        return self._v_statevector_covariance()


    @property
    def pressure(self):
        return self._v_pressure()

SubStateVectorArrayDispersion.init = new_instancemethod(_dispersion.SubStateVectorArrayDispersion_init, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion.state_vector_name_i = new_instancemethod(_dispersion.SubStateVectorArrayDispersion_state_vector_name_i, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion.update_sub_state_hook = new_instancemethod(_dispersion.SubStateVectorArrayDispersion_update_sub_state_hook, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion._v_coefficient = new_instancemethod(_dispersion.SubStateVectorArrayDispersion__v_coefficient, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion._v_used_flag_value = new_instancemethod(_dispersion.SubStateVectorArrayDispersion__v_used_flag_value, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion._v_statevector_covariance = new_instancemethod(_dispersion.SubStateVectorArrayDispersion__v_statevector_covariance, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion._v_pressure = new_instancemethod(_dispersion.SubStateVectorArrayDispersion__v_pressure, None, SubStateVectorArrayDispersion)
SubStateVectorArrayDispersion_swigregister = _dispersion.SubStateVectorArrayDispersion_swigregister
SubStateVectorArrayDispersion_swigregister(SubStateVectorArrayDispersion)



