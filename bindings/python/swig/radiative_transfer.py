# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _radiative_transfer.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_radiative_transfer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_radiative_transfer')
    _radiative_transfer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radiative_transfer', [dirname(__file__)])
        except ImportError:
            import _radiative_transfer
            return _radiative_transfer
        try:
            _mod = imp.load_module('_radiative_transfer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _radiative_transfer = swig_import_helper()
    del swig_import_helper
else:
    import _radiative_transfer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _radiative_transfer.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class RadiativeTransfer(full_physics_swig.generic_object.GenericObject):
    """

    This runs a Radiative Transfer code to determine the reflectance for a
    given set of wavelengths.

    We support both vector and scalar calculations. Because of the large
    size of the arrays returned, we often use only a subset of the stokes
    parameters given by number_stokes(). This can be up to 4, in which
    case we return I, Q, U and V (in that order). For Gosat, we commonly
    return 3 parameters: I, Q and U.

    If the Radiative Transfer code is scalar, then you can either set the
    number_stokes() to 1 and return I, or just set the terms other than I
    to 0.

    C++ includes: radiative_transfer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _radiative_transfer.delete_RadiativeTransfer

    def _v_number_stokes(self):
        """

        virtual int FullPhysics::RadiativeTransfer::number_stokes() const =0
        Number of stokes parameters we will return in stokes and
        stokes_and_jacobian. 
        """
        return _radiative_transfer.RadiativeTransfer__v_number_stokes(self)


    @property
    def number_stokes(self):
        return self._v_number_stokes()


    def _v_number_spectrometer(self):
        """

        virtual int FullPhysics::RadiativeTransfer::number_spectrometer() const =0
        Number of spectrometer we have. 
        """
        return _radiative_transfer.RadiativeTransfer__v_number_spectrometer(self)


    @property
    def number_spectrometer(self):
        return self._v_number_spectrometer()


    def reflectance(self, Spec_domain, Spec_index, Skip_jacobian=False):
        """

        virtual Spectrum FullPhysics::RadiativeTransfer::reflectance(const SpectralDomain &Spec_domain, int Spec_index, bool
        Skip_jacobian=false) const =0
        Calculate reflectance for the given set of wavenumbers/wavelengths.

        Parameters:
        -----------

        Spec_domain:  List of wavenumber/wavelength to calculate for.

        Spec_index:  The Spectral index

        Skip_jacobian:  If true, don't do the Jacobian calculation. Often this
        is significantly faster to calculate.

        The set of reflectance values. 
        """
        return _radiative_transfer.RadiativeTransfer_reflectance(self, Spec_domain, Spec_index, Skip_jacobian)


    def stokes(self, Spec_domain, Spec_index):
        """

        virtual blitz::Array<double, 2> FullPhysics::RadiativeTransfer::stokes(const SpectralDomain &Spec_domain, int Spec_index) const =0
        Calculate stokes vector for the given set of wavenumbers/wavelengths.

        Parameters:
        -----------

        Spec_domain:  List of wavenumber/wavelength to calculate for.

        Spec_index:  The Spectral index

        The set of stokes coefficients. This is Spec_domain.data().rows() x
        number_stokes() in size. 
        """
        return _radiative_transfer.RadiativeTransfer_stokes(self, Spec_domain, Spec_index)


    def stokes_and_jacobian(self, Spec_domain, Spec_index):
        """

        virtual ArrayAd<double, 2> FullPhysics::RadiativeTransfer::stokes_and_jacobian(const SpectralDomain &Spec_domain, int Spec_index) const =0
        Calculate stokes vector for the given set of wavenumbers/wavelengths.

        This also calculates the Jacobian of the stokes with respect to the
        state vector elements.

        Parameters:
        -----------

        Spec_domain:  List of wavenumber/wavelength to calculate for.

        Spec_index:  The Spectral index

        The set of stokes coefficients, along with derivatives with respect to
        the state vector elements. This is Spec_domain.data().rows() x
        number_stokes() in size. 
        """
        return _radiative_transfer.RadiativeTransfer_stokes_and_jacobian(self, Spec_domain, Spec_index)

RadiativeTransfer.__str__ = new_instancemethod(_radiative_transfer.RadiativeTransfer___str__, None, RadiativeTransfer)
RadiativeTransfer._v_number_stokes = new_instancemethod(_radiative_transfer.RadiativeTransfer__v_number_stokes, None, RadiativeTransfer)
RadiativeTransfer._v_number_spectrometer = new_instancemethod(_radiative_transfer.RadiativeTransfer__v_number_spectrometer, None, RadiativeTransfer)
RadiativeTransfer.reflectance = new_instancemethod(_radiative_transfer.RadiativeTransfer_reflectance, None, RadiativeTransfer)
RadiativeTransfer.stokes = new_instancemethod(_radiative_transfer.RadiativeTransfer_stokes, None, RadiativeTransfer)
RadiativeTransfer.stokes_and_jacobian = new_instancemethod(_radiative_transfer.RadiativeTransfer_stokes_and_jacobian, None, RadiativeTransfer)
RadiativeTransfer_swigregister = _radiative_transfer.RadiativeTransfer_swigregister
RadiativeTransfer_swigregister(RadiativeTransfer)



