# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _nlls_problem_state.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nlls_problem_state')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nlls_problem_state')
    _nlls_problem_state = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nlls_problem_state', [dirname(__file__)])
        except ImportError:
            import _nlls_problem_state
            return _nlls_problem_state
        try:
            _mod = imp.load_module('_nlls_problem_state', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nlls_problem_state = swig_import_helper()
    del swig_import_helper
else:
    import _nlls_problem_state
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _nlls_problem_state.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.problem_state
import full_physics_swig.generic_object
class NLLSProblemState(full_physics_swig.problem_state.ProblemState):
    """

    The state for a NLLS problem with implemented residual function and
    its Jacobian.

    NLLSProblemState is used for the Non-Linear Least Squares problem that
    its residual function and Jacobian are implemented. With this class
    one can store the current point in the parameter space (the state),
    the value of the residual vector function at that point, and the
    Jacobian matrix function at the same point.

    Design related question(s): Why is NLLSProblemState not derived from
    CostFuncDiffState?

    Why not first implement a problem state class that only adds residual
    to the state and then derive this class (with residual and Jacobian)
    from that class (similar to CostFuncState and CostFuncDiffState)?

    Answers to the above question(s): Keep in mind that the purpose of the
    classes in the class hierarchy rooted at ProblemState is to maintain
    computationally expensive components of the cost function. If the
    residual and the Jacobian of a NLLS problem are computed, then the
    cost function and its gradient can be computed very fast. If f(x) and
    J(x) are the residual and the Jacobian of the NLLS problem
    respectively evaluated at x, then the cost function and its gradient
    respectively are \\[ \\frac{1}{2}\\parallel f(x) \\parallel^2
    \\] and \\[ J(x)^T f(x) \\]

    If the Jacobian of a residual function is not available, then the only
    methods that can solve the optimization problem use the cost function.
    In other words, in this case the problem is solved in a form that is
    presented by CostFunc class. For the problem in CostFunc form,
    CostFuncState state class is sufficient.

    C++ includes: nlls_problem_state.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nlls_problem_state.delete_NLLSProblemState

    def set(self, s):
        """

        void NLLSProblemState::set(const NLLSProblemState &s)
        Makes self a copy of the input state.

        This method makes the object, for which it is called, a copy of the
        input state.

        Parameters:
        -----------

        s:  another NLLSProblemState 
        """
        return _nlls_problem_state.NLLSProblemState_set(self, s)

NLLSProblemState.set = new_instancemethod(_nlls_problem_state.NLLSProblemState_set, None, NLLSProblemState)
NLLSProblemState_swigregister = _nlls_problem_state.NLLSProblemState_swigregister
NLLSProblemState_swigregister(NLLSProblemState)



