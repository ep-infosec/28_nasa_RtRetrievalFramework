# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _forward_model.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_forward_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_forward_model')
    _forward_model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_forward_model', [dirname(__file__)])
        except ImportError:
            import _forward_model
            return _forward_model
        try:
            _mod = imp.load_module('_forward_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _forward_model = swig_import_helper()
    del swig_import_helper
else:
    import _forward_model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _forward_model.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class ForwardModel(full_physics_swig.generic_object.GenericObject):
    """

    This is the Forward Model.

    Note that the forward model depends on the value of the StateVector.
    This is set separate from getting the radiance or jacobian values.

    C++ includes: forward_model.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _forward_model.delete_ForwardModel

    def _v_state_vector(self):
        """

        virtual boost::shared_ptr<StateVector> FullPhysics::ForwardModel::state_vector() const =0
        The state vector associated with the forward model. 
        """
        return _forward_model.ForwardModel__v_state_vector(self)


    @property
    def state_vector(self):
        return self._v_state_vector()


    def _v_number_spectrometer(self):
        """

        virtual int FullPhysics::ForwardModel::number_spectrometer() const =0
        The number of spectral bands associated with forward model. 
        """
        return _forward_model.ForwardModel__v_number_spectrometer(self)


    @property
    def number_spectrometer(self):
        return self._v_number_spectrometer()


    def hdf_band_name(self, Spec_index):
        """

        virtual std::string FullPhysics::ForwardModel::hdf_band_name(int Spec_index) const =0
        The HDF field name to use for a particular band (e.g., "weak_co2")

        """
        return _forward_model.ForwardModel_hdf_band_name(self, Spec_index)


    def spectral_domain(self, Spec_index):
        """

        virtual SpectralDomain FullPhysics::ForwardModel::spectral_domain(int Spec_index) const =0
        Spectral domain for the given spectral band.

        Note that this may be empty. 
        """
        return _forward_model.ForwardModel_spectral_domain(self, Spec_index)


    def radiance(self, Spec_index, Skip_jacobian=False):
        """

        virtual Spectrum FullPhysics::ForwardModel::radiance(int Spec_index, bool Skip_jacobian=false) const =0
        Spectrum for the given spectral band.

        Note that this may be empty.

        Parameters:
        -----------

        Spec_index:  Band to give value for

        Skip_jacobian:  If true, don't do the Jacobian calculation. Often this
        is significantly faster to calculate.

        The set of radiances, possibly empty. 
        """
        return _forward_model.ForwardModel_radiance(self, Spec_index, Skip_jacobian)


    def measured_radiance(self, Spec_index):
        """

        virtual Spectrum FullPhysics::ForwardModel::measured_radiance(int Spec_index) const =0
        Measured spectrum for the given spectral band.

        Note that this may be empty.

        Parameters:
        -----------

        Spec_index:  Band to give value for

        The set of radiances, possibly empty. 
        """
        return _forward_model.ForwardModel_measured_radiance(self, Spec_index)


    def setup_grid(self):
        """

        virtual void FullPhysics::ForwardModel::setup_grid()=0
        The grid that the forward model runs on may depend on the state
        vector.

        This notifies the forward model that it should setup the grid 
        """
        return _forward_model.ForwardModel_setup_grid(self)


    def radiance_all(self, Skip_jacobian=False):
        """

        Spectrum ForwardModel::radiance_all(bool Skip_jacobian=false) const
        This is radiance, all stacked together as one long spectrum (so band
        0, followed by band 1, etc.). 
        """
        return _forward_model.ForwardModel_radiance_all(self, Skip_jacobian)


    def _v_measured_radiance_all(self):
        """

        Spectrum ForwardModel::measured_radiance_all() const
        This is the measured radiance, all stacked together as one long
        spectrum (so band 0, followed by band 1, etc.). 
        """
        return _forward_model.ForwardModel__v_measured_radiance_all(self)


    @property
    def measured_radiance_all(self):
        return self._v_measured_radiance_all()


    def pixel_range(self, Spec_index):
        """

        boost::optional< Range > ForwardModel::pixel_range(int Spec_index) const
        The range of radiance() that corresponds to a particular band.

        Note a particular issue, the range may well be empty if a band is not
        used at all. This is a useful edge case, but unfortunately
        blitz::Range does not support empty ranges. As a simple work around,
        we use the boost::optional class to return a value only if the range
        is not empty. 
        """
        return _forward_model.ForwardModel_pixel_range(self, Spec_index)


    def _v_input_file_description(self, *args):
        """

        void FullPhysics::ForwardModel::input_file_description(const std::string &V)

        """
        return _forward_model.ForwardModel__v_input_file_description(self, *args)


    @property
    def input_file_description(self):
        return self._v_input_file_description()

    @input_file_description.setter
    def input_file_description(self, value):
      self._v_input_file_description(value)

ForwardModel.__str__ = new_instancemethod(_forward_model.ForwardModel___str__, None, ForwardModel)
ForwardModel._v_state_vector = new_instancemethod(_forward_model.ForwardModel__v_state_vector, None, ForwardModel)
ForwardModel._v_number_spectrometer = new_instancemethod(_forward_model.ForwardModel__v_number_spectrometer, None, ForwardModel)
ForwardModel.hdf_band_name = new_instancemethod(_forward_model.ForwardModel_hdf_band_name, None, ForwardModel)
ForwardModel.spectral_domain = new_instancemethod(_forward_model.ForwardModel_spectral_domain, None, ForwardModel)
ForwardModel.radiance = new_instancemethod(_forward_model.ForwardModel_radiance, None, ForwardModel)
ForwardModel.measured_radiance = new_instancemethod(_forward_model.ForwardModel_measured_radiance, None, ForwardModel)
ForwardModel.setup_grid = new_instancemethod(_forward_model.ForwardModel_setup_grid, None, ForwardModel)
ForwardModel.radiance_all = new_instancemethod(_forward_model.ForwardModel_radiance_all, None, ForwardModel)
ForwardModel._v_measured_radiance_all = new_instancemethod(_forward_model.ForwardModel__v_measured_radiance_all, None, ForwardModel)
ForwardModel.pixel_range = new_instancemethod(_forward_model.ForwardModel_pixel_range, None, ForwardModel)
ForwardModel._v_input_file_description = new_instancemethod(_forward_model.ForwardModel__v_input_file_description, None, ForwardModel)
ForwardModel_swigregister = _forward_model.ForwardModel_swigregister
ForwardModel_swigregister(ForwardModel)



